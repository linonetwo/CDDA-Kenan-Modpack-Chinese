[
  {
    "id": "dash_kokoro_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "if": {
          "message": "Set target", 
          "range": 4,
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_dash_kokoro_loc" }
        },
        "then": [
          { "u_cast_spell": { "id": "dash_basic_levitate", "hit_self": true } },
          { "u_cast_spell": { "id": "dash_kokoro2" }, "loc": { "global_val": "var_dash_kokoro_loc" } },
          { "u_cast_spell": { "id": "dash_kokoro3" } }
        ],
        "else": [
          { "math": [ "u_val('stamina')", "+=", "2000" ] },
          { "u_message": "Canceled" }
        ]
      }
    ]
  },
  {
    "id": "dash_meiling_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "if": {
          "message": "Set target", 
          "range": 5,
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_dash_meiling_loc" }
        },
        "then": [
          { "math": [ "var_dash_meiling_distance", "=", "( distance('u', var_dash_meiling_loc) )"] },
          { "u_cast_spell": { "id": "dash_basic_levitate", "hit_self": true } },
          { "u_cast_spell": { "id": "dash_meiling3" }, "loc": { "global_val": "var_dash_meiling_loc" } },
          { "u_cast_spell": { "id": "dash_meiling4" }, "loc": { "global_val": "var_dash_meiling_loc" } },
          { "u_cast_spell": { "id": "dash_meiling5" }, "loc": { "global_val": "var_dash_meiling_loc" } },
          { "u_cast_spell": { "id": "dash_meiling2" }, "loc": { "global_val": "var_dash_meiling_loc" } },
          { "u_cast_spell": { "id": "dash_meiling6" } }
        ],
        "else": [
          { "math": [ "u_val('stamina')", "+=", "2000" ] },
          { "u_message": "Canceled" }
        ]
      }
    ],
    "//": "This dash marks a location, and then does the following: sets distance to the location, adds the LEVITATION effect for Meiling (by the spell)",
    "//2": "Then, tags the target with a TAG_effect , stuns it target (qol), pushes it back, Meiling casts the dash spell to the location, and an aoe that forces the EOC below on any target under the aoe"
  },
  {
    "id": "dash_meiling_knockin_eoc",
    "type": "effect_on_condition",
    "condition": { "u_has_effect": "dash_meiling_tag_effect" },
    "effect": [ { "u_cast_spell": { "id": "dash_meiling7", "hit_self": true }, "loc": { "global_val": "var_dash_meiling_loc" } } ],
    "//": "This EOC checks if any creature under the aoe has the TAG_effect , and if so it forces it to cast the self-push towards the marked location",
    "//2": "Because Meiling is already there, the target is placed to the tile next to her",
    "//3": "This succesfully (?) emulates Meiling dashing to a location while pushing the target with her"
  },
  {
    "id": "dash_mokou_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "if": {
          "message": "Set target", 
          "range": 5,
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_dash_mokou_loc" }
        },
        "then": [
          { "u_cast_spell": { "id": "dash_basic_levitate", "hit_self": true } },
          { "u_cast_spell": { "id": "dash_mokou3" } },
          { "u_cast_spell": { "id": "dash_mokou2" }, "loc": { "global_val": "var_dash_mokou_loc" } }
        ],
        "else": [
          { "math": [ "u_val('stamina')", "+=", "2000" ] },
          { "u_message": "Canceled" }
        ]
      }
    ]
  },
  {
    "id": "dash_youmu_eoc",
    "type": "effect_on_condition",
    "condition": {
      "or": [
        { "u_has_wielded_with_weapon_category": "SHORT_SWORDS" },
        { "u_has_wielded_with_weapon_category": "MEDIUM_SWORDS" },
        { "u_has_wielded_with_weapon_category": "LONG_SWORDS" },
        { "u_has_wielded_with_weapon_category": "FENCING_WEAPONRY" },
        { "u_has_wielded_with_weapon_category": "LONG_THRUSTING_SWORDS" },
        { "u_has_wielded_with_weapon_category": "GREAT_SWORDS" },
        { "u_has_wielded_with_weapon_category": "BIONIC_SWORDS" }
      ]
    },
    "effect": [
      { "u_location_variable": { "global_val": "var_youmu_dash_start_loc" }, "min_radius": 0, "max_radius": 0 },
      {
        "if": {
          "message": "Set target", 
          "range": 4,
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_dash_youmu_end_loc" }
        },
        "then": [
          { "u_teleport": { "global_val": "var_dash_youmu_end_loc" } },
          { "u_cast_spell": { "id": "dash_youmu2" }, "loc": { "global_val": "var_dash_youmu_end_loc" } }
        ],
        "else": [
          { "math": [ "u_val('stamina')", "+=", "2000" ] },
          { "u_message": "Canceled" }
        ]
      }
    ],
    "false_effect": [ 
      {
        "if": {
          "message": "Set target", 
          "range": 4,
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_dash_youmu_end_loc" }
        },
        "then": [
          { "u_cast_spell": { "id": "dash_youmu3" }, "loc": { "global_val": "var_dash_youmu_end_loc" } }
        ],
        "else": [
          { "math": [ "u_val('stamina')", "+=", "2000" ] },
          { "u_message": "Canceled" }
        ]
      }
    ]
  },
  {
    "id": "fly_downwards_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "u_location_variable": { "u_val": "u_winged_loc" } },
      { "location_variable_adjust": { "context_val": "u_winged_loc" }, "z_adjust": 0 },
      {
        "if": { "map_terrain_with_flag": "EMPTY_SPACE", "loc": { "context_val": "u_winged_loc" } },
        "then": { "run_eocs": [ "fly_downwards2_eoc" ] },
        "else": { "u_message": "You can't descend there.", "type": "mixed" }
      }
    ]
  },
  {
    "id": "fly_downwards2_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "u_location_variable": { "u_val": "u_winged_loc" } },
      { "location_variable_adjust": { "context_val": "u_winged_loc" }, "z_adjust": -1 },
      {
        "if": { "map_terrain_with_flag": "FLAT", "loc": { "context_val": "u_winged_loc" } },
        "then": [
          { "u_message": "You fly downwards.", "type": "good" },
          { "u_teleport": { "context_val": "u_winged_loc" } }
        ],
        "else": { "run_eocs": [ "fly_downwards3_eoc" ] }
      }
    ]
  },
  {
    "id": "fly_downwards3_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "if": { "map_terrain_with_flag": "ROAD", "loc": { "context_val": "u_winged_loc" } },
        "then": [
          { "u_message": "You fly downwards.", "type": "good" },
          { "u_teleport": { "context_val": "u_winged_loc" } }
        ],
        "else": { "run_eocs": [ "fly_downwards4_eoc" ] }
      }
    ]
  },
  {
    "id": "fly_downwards4_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "if": { "map_terrain_with_flag": "BURROWABLE", "loc": { "context_val": "u_winged_loc" } },
        "then": [
          { "u_message": "You fly downwards.", "type": "good" },
          { "u_teleport": { "context_val": "u_winged_loc" } }
        ],
        "else": { "run_eocs": [ "fly_downwards5_eoc" ] }
      }
    ]
  },
  {
    "id": "fly_downwards5_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "if": { "map_terrain_with_flag": "TRANSPARENT", "loc": { "context_val": "u_winged_loc" } },
        "then": [
          { "u_message": "You fly downwards.", "type": "good" },
          { "u_teleport": { "context_val": "u_winged_loc" } }
        ],
        "else": { "u_message": "You can't descend there.", "type": "mixed" }
      }
    ]
  },
  {
    "id": "fly_upwards_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "u_location_variable": { "u_val": "u_winged_loc" } },
      { "location_variable_adjust": { "context_val": "u_winged_loc" }, "z_adjust": 1 },
      {
        "if": { "map_terrain_with_flag": "EMPTY_SPACE", "loc": { "context_val": "u_winged_loc" } },
        "then": [
          { "u_message": "You fly upwards.", "type": "good" },
          { "u_teleport": { "context_val": "u_winged_loc" } }
        ],
        "else": { "u_message": "You can't fly there.", "type": "mixed" }
      }
    ]
  },
  {
    "id": "aya_fanwind_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "if": {
          "message": "Set target", 
          "range": 8,
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_aya_fanwind_loc" }
        },
        "then": [
          { "math": [ "var_ayafanwind_dur", "=", "( ( (u_skill('dodge') * 100 ) + 200 ) - 100 )" ] },
          { "u_cast_spell": { "id": "aya_fanwind3" }, "loc": { "global_val": "var_aya_fanwind_loc" } },
          { "run_eoc_with": "aya_fanwind_delay_eoc", "variables": { "aya_fanwind_loc": "var_aya_fanwind_loc" } }
        ],
        "else": [
          { "math": [ "u_val('mana')", "+=", "50" ] },
          { "u_message": "Canceled" }
        ]
      }
    ]
  },
  {
    "id": "aya_fanwind_delay_eoc",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "expects_vars": [ "aya_fanwind_loc" ] },
        { "math": [ "var_ayafanwind_dur", ">=", "0" ] }
      ]
    },
    "effect": [
      { "math": [ "var_ayafanwind_dur", "-=", "100" ] },
      { "u_cast_spell": { "id": "aya_fanwind2" }, "loc": { "global_val": "var_aya_fanwind_loc" } },
      { "queue_eocs": [ "aya_fanwind_delay_eoc" ], "time_in_future": "1 s" }
    ],
    "false_effect": [ 
      { "math": [ "var_ayafanwind_dur", "=", "0" ] }
    ]
  },
  {
    "id": "iku_batteryrestore_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "u_run_inv_eocs": "all",
        "search_data": [ 
          { "id": "light_minus_battery_cell", "wielded_only": true },
          { "id": "light_battery_cell", "wielded_only": true },
          { "id": "light_cell_rechargeable", "wielded_only": true },
          { "id": "medium_battery_cell", "wielded_only": true },
          { "id": "heavy_battery_cell", "wielded_only": true },
          { "id": "heavy_plus_battery_cell", "wielded_only": true }
        ],
        "true_eocs": [ "iku_batteryrestore_check" ],
        "false_eocs": [ 
          {
            "id": "batteryrestore_no",
            "effect": [ { "u_message": "You don't have a battery at hand.", "type": "mixed" } ]
          }
        ]
      }
    ],
    "//": "This checks if Iku is wielding a battery, and if so runs the EOCs below, which detect which kind of battery she has and 'recharges' it, draining proportional mana",
    "//2": "As u_consume_item with a negative charge value just destroys the item, the trick is to destroy + create a new battery, which thankfully spawns with full charge, else the spell wouldn't work",
    "//note": "#70651 was fixed, the EOC below can be merged with this one without issues",
    "//note2": "Could be simplified by #74748"
  },
  {
    "id": "iku_batteryrestore_check",
    "type": "effect_on_condition",
    "effect": [
      {
        "u_run_inv_eocs": "all",
        "search_data": [ { "id": "light_minus_battery_cell", "wielded_only": true } ],
        "true_eocs": [
          {
            "id": "batteryrestore1_eoc",
            "condition": { "math": [ "u_val('mana')", ">=", "10" ] },
            "effect": [
              { "math": [ "u_val('mana')", "-=", "25" ] },
              { "u_consume_item": "light_minus_battery_cell", "count": 1 },
              { "u_spawn_item": "light_minus_battery_cell", "force_equip": true, "suppress_message": true },
              { "u_message": "You recharge the battery.", "type": "mixed" }
            ],
            "false_effect": [ { "u_message": "You don't have enough energy.", "type": "mixed" } ]
          }
        ]
      },
      {
        "u_run_inv_eocs": "all",
        "search_data": [ { "id": "light_battery_cell", "wielded_only": true } ],
        "true_eocs": [
          {
            "id": "batteryrestore2_eoc",
            "condition": { "math": [ "u_val('mana')", ">=", "50" ] },
            "effect": [
              { "math": [ "u_val('mana')", "-=", "50" ] },
              { "u_consume_item": "light_battery_cell", "count": 1 },
              { "u_spawn_item": "light_battery_cell", "force_equip": true, "suppress_message": true },
              { "u_message": "You recharge the battery.", "type": "mixed" }
            ],
            "false_effect": [ { "u_message": "You don't have enough energy.", "type": "mixed" } ]
          }
        ]
      },
      {
        "u_run_inv_eocs": "all",
        "search_data": [ { "id": "light_cell_rechargeable", "wielded_only": true } ],
        "true_eocs": [
          {
            "id": "batteryrestore3_eoc",
            "condition": { "math": [ "u_val('mana')", ">=", "50" ] },
            "effect": [
              { "math": [ "u_val('mana')", "-=", "50" ] },
              { "u_consume_item": "light_cell_rechargeable", "count": 1 },
              { "u_spawn_item": "light_cell_rechargeable", "force_equip": true, "suppress_message": true },
              { "u_message": "You recharge the battery.", "type": "mixed" }
            ],
            "false_effect": [ { "u_message": "You don't have enough energy.", "type": "mixed" } ]
          }
        ]
      },
      {
        "u_run_inv_eocs": "all",
        "search_data": [ { "id": "medium_battery_cell", "wielded_only": true } ],
        "true_eocs": [
          {
            "id": "batteryrestore4_eoc",
            "condition": { "math": [ "u_val('mana')", ">=", "200" ] }, 
            "effect": [
              { "math": [ "u_val('mana')", "-=", "200" ] },
              { "u_consume_item": "medium_battery_cell", "count": 1 },
              { "u_spawn_item": "medium_battery_cell", "force_equip": true, "suppress_message": true },
              { "u_message": "You recharge the battery.", "type": "mixed" }
            ],
            "false_effect": [ { "u_message": "You don't have enough energy.", "type": "mixed" } ]
          }
        ]
      },
      {
        "u_run_inv_eocs": "all",
        "search_data": [ { "id": "heavy_battery_cell", "wielded_only": true } ],
        "true_eocs": [
          {
            "id": "batteryrestore5_eoc",
            "condition": { "math": [ "u_val('mana')", ">=", "500" ] }, 
            "effect": [
              { "math": [ "u_val('mana')", "-=", "500" ] },
              { "u_consume_item": "heavy_battery_cell", "count": 1 },
              { "u_spawn_item": "heavy_battery_cell", "force_equip": true, "suppress_message": true },
              { "u_message": "You recharge the battery.", "type": "mixed" }
            ],
            "false_effect": [ { "u_message": "You don't have enough energy.", "type": "mixed" } ]
          }
        ]
      },
      {
        "u_run_inv_eocs": "all",
        "search_data": [ { "id": "heavy_plus_battery_cell", "wielded_only": true } ],
        "true_eocs": [
          {
            "id": "batteryrestore6_eoc",
            "condition": { "math": [ "u_val('mana')", ">=", "625" ] }, 
            "effect": [
              { "math": [ "u_val('mana')", "-=", "625" ] },
              { "u_consume_item": "heavy_plus_battery_cell", "count": 1 },
              { "u_spawn_item": "heavy_plus_battery_cell", "force_equip": true, "suppress_message": true },
              { "u_message": "You recharge the battery.", "type": "mixed" }
            ],
            "false_effect": [ { "u_message": "You don't have enough energy.", "type": "mixed" } ]
          }
        ]
      }
    ]
  },
  {
    "id": "iku_readweather_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "if": { 
          "and": [ 
            { "not": { "is_weather": "sunny" } },
            { "not": { "is_weather": "cloudy" } },
            { "not": { "is_weather": "light_drizzle" } },
            { "not": { "is_weather": "drizzle" } },
            { "not": { "is_weather": "rain" } },
            { "not": { "is_weather": "rainstorm" } },
            { "not": { "is_weather": "thunder" } },
            { "not": { "is_weather": "lightning" } },
            { "not": { "is_weather": "flurries" } },
            { "not": { "is_weather": "snowstorm" } },
            { "not": { "is_weather": "mist" } },
            { "not": { "is_weather": "fog" } },
            { "not": { "is_weather": "early_portal_storm" } },
            { "not": { "is_weather": "portal_storm" } },
            { "not": { "is_weather": "close_portal_storm" } },
            { "not": { "is_weather": "distant_portal_storm" } }
          ] 
        }, 
        "then": { "u_message": "It is clear.", "type": "good" }
      },
      {
        "if": { "is_weather": "sunny" },
        "then": { "u_message": "It is sunny.", "type": "good" }
      },
      {
        "if": { "is_weather": "cloudy" },
        "then": { "u_message": "It is cloudy.", "type": "good" }
      },
      {
        "if": { "is_weather": "light_drizzle" },
        "then": { "u_message": "There is a light drizzle.", "type": "good" }
      },
      {
        "if": { "is_weather": "drizzle" },
        "then": { "u_message": "There is a drizzle.", "type": "good" }
      },
      {
        "if": { "is_weather": "rain" },
        "then": { "u_message": "It is raining.", "type": "good" }
      },
      {
        "if": { "is_weather": "rainstorm" },
        "then": { "u_message": "There is a rainstorm.", "type": "good" }
      },
      {
        "if": { "is_weather": "thunder" },
        "then": { "u_message": "There is a thunderstorm.", "type": "good" }
      },
      {
        "if": { "is_weather": "lightning" },
        "then": { "u_message": "There is a lightning storm.", "type": "good" }
      },
      {
        "if": { "is_weather": "flurries" },
        "then": { "u_message": "There are flurries.", "type": "good" }
      },
      {
        "if": { "is_weather": "snowing" },
        "then": { "u_message": "It is snowing.", "type": "good" }
      },
      {
        "if": { "is_weather": "snowstorm" },
        "then": { "u_message": "There is a snowstorm.", "type": "good" }
      },
      {
        "if": { "is_weather": "mist" },
        "then": { "u_message": "There is mist.", "type": "good" }
      },
      {
        "if": { "is_weather": "fog" },
        "then": { "u_message": "There is fog.", "type": "good" }
      },
      {
        "if": { "is_weather": "early_portal_storm" },
        "then": { "u_message": "Something's wrong.", "type": "bad" }
      },
      {
        "if": { "is_weather": "distant_portal_storm" },
        "then": { "u_message": "Something's wrong.", "type": "bad" }
      },
      {
        "if": { "is_weather": "close_portal_storm" },
        "then": { "u_message": "Something's wrong.", "type": "bad" }
      },
      {
        "if": { "is_weather": "portal_storm" },
        "then": { "u_message": "Something's wrong.", "type": "bad" }
      }
    ],
    "//": "Tried to make it predict the next weather, asuming that atmospheric values can update before the weather",
    "//2": "However, weather_types have priorities, so even if the weathers above are ordered by priorities, a premature stop is required to not print 'weather A and B and C are coming next'. And then weather D happens"
  },
  {
    "id": "kaenbyou_blazingwheel_eoc",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_var_soulshard", ">=", "2" ] },
    "effect": [
      {
        "if": {
          "message": "Set target", 
          "range": 12,
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_kaenbyou_blazingwheel_loc" }
        },
        "then": [
          { 
            "queue_eoc_with": "kaenbyou_blazingwheel_delay_eoc", 
            "variables": { "kaenbyou_blazingwheel_loc": "var_kaenbyou_blazingwheel_loc" }, 
            "time_in_future": "1 s" 
          }
        ],
        "else": [
          { "math": [ "u_val('mana')", "+=", "150" ] },
          { "u_message": "Canceled" }
        ]
      }
    ],
    "false_effect": [ 
      { "u_message": "You don't have enough soulshards to cast this.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "150" ] }
    ],
    "//": "The soulshards are consumed after (automatically) chaining a spell EOC that runs kaenbyou_consume_soulshard_2_eoc "
  },
  {
    "id": "kaenbyou_blazingwheel_delay_eoc",
    "type": "effect_on_condition",
    "condition": { "expects_vars": [ "kaenbyou_blazingwheel_loc" ] },
    "effect": [
      { "u_cast_spell": { "id": "kaenbyou_blazingwheel2" }, "loc": { "global_val": "var_kaenbyou_blazingwheel_loc" } }
    ]
  },
  {
    "id": "kaenbyou_corpseexplosion_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "if": {
          "message": "Select target", 
          "range": 8,
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_corpseexplosion_loc" }
        },
        "then": [
          {
            "u_map_run_item_eocs": "all",
            "search_data": [ 
              { "id": "corpse" },
              { "id": "corpse_generic_human" },
              { "id": "corpse_generic_male" },
              { "id": "corpse_generic_female" },
              { "id": "corpse_generic_boy" },
              { "id": "corpse_generic_girl" }
            ],
            "loc": { "global_val": "var_corpseexplosion_loc" },
            "min_radius": 0,
            "max_radius": 0,
            "true_eocs": [ 
              { 
                "id": "kaenbyou_corpseexplosion_explode", 
                "effect": [ 
                  { "math": [ "var_corpseexplosion_dmg", "=", "( ( ( n_val('weight') / 1000000 ) / 2 ) * 100 * rng( 0.75, 1.25 ) )" ] },
                  "npc_die",
                  { "math": [ "var_corpseexplosion_aoe", "=", "1 + rand(1)" ] },
                  { "u_cast_spell": { "id": "kaenbyou_corpseexplosion2" }, "loc": { "global_val": "var_corpseexplosion_loc" } },
                  { "u_cast_spell": { "id": "kaenbyou_corpseexplosion3" }, "loc": { "global_val": "var_corpseexplosion_loc" } },
                  { "u_cast_spell": { "id": "death_blood4" }, "loc": { "global_val": "var_corpseexplosion_loc" } }
                ] 
              } 
            ],
            "false_eocs": [ 
              {
                "id": "kaenbyou_corpseexplosion_nocorpse",
                "effect": [ 
                  { "math": [ "u_val('mana')", "+=", "75" ] },
                  { "u_message": "There is no suitable corpse at the location.", "type": "mixed" } 
                ]
              }
            ]
          }
        ],
        "else": [ 
          { "math": [ "u_val('mana')", "+=", "75" ] },
          { "u_message": "Canceled" }
        ]
      }
    ],
    "//": "This asks for the player to select a location, checks if there's any corpse (fresh-ish)",
    "//2": "If true, it saves the location, sets dmg as ( corpse_weight * 0.5 * ( 75 - 125% ) ), divided by two as the spell deals two instances of dmg, heat + bash",
    "//3": "It then removes the corpse item, sets a random aoe, and casts the spells plus the vfx at the location. If there's no corpse or Kaenbyou cancels the cast, some mana is refunded",
    "//4": "The corpse actual weight is not the monster's weight. After testing at bit, it goes from 0.5 - 1.2, up to 3 kg for common zombies. The formula above is adjusted to deal ~100x times that amount"
  },
  {
    "id": "kaenbyou_infernoburst_eoc",
    "type": "effect_on_condition",
    "condition": { "u_has_effect": "immolate_light" },
    "effect": [
      { "u_cast_spell": { "id": "kaenbyou_infernoburst3" } }
    ],
    "//": "This just checks if the target has the immolate effect, if so it applies the self-spell for bonus dmg"
  },
  {
    "id": "kaenbyou_consume_soulshard_eoc",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_var_soulshard", ">=", "1" ] },
    "effect": [ { "math": [ "u_var_soulshard", "-=", "1" ] } ]
  },
  {
    "id": "kaenbyou_consume_soulshard_2_eoc",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_var_soulshard", ">=", "2" ] },
    "effect": [ { "math": [ "u_var_soulshard", "-=", "2" ] } ]
  },
  {
    "id": "kaenbyou_consume_soulshard_8_eoc",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_var_soulshard", ">=", "8" ] },
    "effect": [ { "math": [ "u_var_soulshard", "-=", "8" ] } ]
  },
  {
    "id": "kaenbyou_soulfire_eoc",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_var_soulshard", ">=", "1" ] },
    "effect": [
      { "u_cast_spell": { "id": "kaenbyou_soulfire2" }, "targeted": true }
    ],
    "false_effect": [ 
      { "u_message": "You don't have enough soulshards to cast this.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "133" ] }
    ]
  },
  {
    "id": "kaenbyou_soulshard_fuel_eoc",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_var_soulshard", ">=", "8" ] },
    "effect": [
      { "u_cast_spell": { "id": "kaenbyou_soulshard_fuel2" }, "targeted": true }
    ],
    "false_effect": [ 
      { "u_message": "You don't have enough soulshards to cast this.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "50" ] }
    ]
  },
  {
    "id": "kaenbyou_soulshatter_eoc",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_var_soulshard", ">=", "1" ] },
    "effect": [
      { "u_cast_spell": { "id": "kaenbyou_soulshatter2" }, "targeted": true }
    ],
    "false_effect": [ 
      { "u_message": "You don't have enough soulshards to cast this.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "50" ] }
    ]
  },
  {
    "id": "kaenbyou_vspossess_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "u_var_vspossess", "+=", "1" ] }
    ],
    "//": "This just tags the target with the var",
    "//2": "Downstream effects are triggered by kaenbyou_vspossess_kill when the target dies and there's at least a vengeful spirit nearby"
  },
  {
    "id": "kasen_calorieburn_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "var_kasencalorieburn", "+=", "1" ] },
      { "run_eocs": [ "kasen_calorieburn_cycle1" ] }
    ],
    "//": "This EOC is a simplified version of udonge_waveinsight_start "
  },
  {
    "id": "kasen_calorieburn_cycle1",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_kasencalorieburn", "<", "2" ] },
    "effect": [ { "run_eocs": [ "kasen_calorieburn_cycle2" ] } ],
    "false_effect": [
      { "math": [ "var_kasencalorieburn", "=", "0" ] },
      { "u_lose_effect": "kasen_calorieburn" }
    ]
  },
  {
    "id": "kasen_calorieburn_cycle2",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "u_val('mana')", "<=", "u_val('mana_max')" ] },
        { "math": [ "u_calories()", ">=", "5500" ] },
        { "math": [ "var_kasencalorieburn", ">", "0" ] },
        { "math": [ "var_kasencalorieburn", "<", "2" ] }
      ]
    },
    "effect": [
      { "math": [ "u_val('mana')", "+=", "6 + rand(8)" ] },
      { "math": [ "u_calories()", "-=", "110 + rand(110)" ] },
      { "u_add_effect": "kasen_calorieburn", "duration": "5 s" },
      { "queue_eocs": [ "kasen_calorieburn_cycle1" ], "time_in_future": [ "2 s", "5 s" ] }
    ],
    "false_effect": [
      { "math": [ "var_kasencalorieburn", "=", "0" ] },
      { "u_lose_effect": "kasen_calorieburn" }
    ],
    "//": "Assuming a mana pool of 1000 and the default of 55000 cal, this burns 90% of the stored energy for ~3000 mana over (400 - 1000) s"
  },
  {
    "id": "kasen_fangshu_selector_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "run_eoc_selector": [
          "kasen_fangshu_move_eoc",
          "kasen_fangshu_set_eoc",
          "kasen_fangshu_delete_eoc"
        ],
        "title": "Fangshu: Path",
        "names": [
          "Traverse through exit point.",
          "Set exit point.",
          "Delete all exit points."
        ],
        "keys": [ "1", "2", "3" ],
        "descriptions": [
          "Traverse through any previously placed exit points.",
          "Set one of three exit points to traverse through.  Costs 133 mana.",
          "Delete all placed exit points."
        ],
        "hide_failing": true,
        "allow_cancel": true
      }
    ],
    "//": "Adapted from #75872. Each cast opens a window. The first cast asks the Kasen to Set an exit point -> pick any of the three slots -> (optional) name it",
    "//2": "The second cast allows Kasen to set point/tp to point/delete all points",
    "//3": "If Kasen sets tp it just overwrites it; the other two options are self-explanatory",
    "//4": "Do note that the move_eoc and the delete_eoc won't be available unless their conditions are met. Which is pretty nice, and disables their false_effects from running"
  },
  {
    "id": "kasen_fangshu_move_eoc",
    "type": "effect_on_condition",
    "condition": {
      "or": [
        { "math": [ "u_var_kasen_fangshu_placed_1", ">=", "1" ] },
        { "math": [ "u_var_kasen_fangshu_placed_2", ">=", "1" ] },
        { "math": [ "u_var_kasen_fangshu_placed_3", ">=", "1" ] }
      ]
    },
    "effect": [
      {
        "run_eoc_selector": [
          "kasen_fangshu_move_1",
          "kasen_fangshu_move_2",
          "kasen_fangshu_move_3"
        ],
        "title": "Traverse through:",
        "names": [
          "Exit point 1, <u_val:u_var_kasen_fangshu_1_name>.",
          "Exit point 2, <u_val:u_var_kasen_fangshu_2_name>.",
          "Exit point 3, <u_val:u_var_kasen_fangshu_3_name>."
        ],
        "keys": [ "1", "2", "3" ],
        "descriptions": [
          "Open and traverse through exit point 1.",
          "Open and traverse through exit point 2.",
          "Open and traverse through exit point 3."
        ],
        "hide_failing": true,
        "allow_cancel": true
      }
    ],
    "false_effect": [ 
      { "u_message": "There are no active exit points.", "type": "mixed" }
    ]
  },
  {
    "id": "kasen_fangshu_move_1",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_var_kasen_fangshu_placed_1", ">=", "1" ] },
    "effect": [ 
      { "u_teleport": { "global_val": "var_kasen_fangshu_1" } },
      { "u_message": "You open a crack in space time, and walk through the exit point.", "type": "mixed" }
    ],
    "false_effect": [ 
      { "u_message": "You haven't placed that exit point yet.", "type": "mixed" }
    ]
  },
  {
    "id": "kasen_fangshu_move_2",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_var_kasen_fangshu_placed_2", ">=", "1" ] },
    "effect": [ 
      { "u_teleport": { "global_val": "var_kasen_fangshu_2" } },
      { "u_message": "You open a crack in space time, and walk through the exit point.", "type": "mixed" }
    ],
    "false_effect": [ 
      { "u_message": "You haven't placed that exit point yet.", "type": "mixed" }
    ]
  },
  {
    "id": "kasen_fangshu_move_3",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_var_kasen_fangshu_placed_3", ">=", "1" ] },
    "effect": [ 
      { "u_teleport": { "global_val": "var_kasen_fangshu_3" } },
      { "u_message": "You open a crack in space time, and walk through the exit point.", "type": "mixed" }
    ],
    "false_effect": [ 
      { "u_message": "You haven't placed that exit point yet.", "type": "mixed" }
    ]
  },
  {
    "id": "kasen_fangshu_set_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "run_eoc_selector": [
          "kasen_fangshu_set_1",
          "kasen_fangshu_set_2",
          "kasen_fangshu_set_3"
        ],
        "title": "Set exit point:",
        "names": [
          "Exit point 1.",
          "Exit point 2.",
          "Exit point 3."
        ],
        "keys": [ "1", "2", "3" ],
        "descriptions": [
          "Set up exit point 1.",
          "Set up exit point 2.",
          "Set up exit point 3."
        ],
        "hide_failing": true,
        "allow_cancel": true
      }
    ]
  },
  {
    "id": "kasen_fangshu_set_1",
    "type": "effect_on_condition",
    "effect": [ 
      {
        "set_string_var": "Exit point 1",
        "string_input": {
          "title": { "i18n": true, "str": "Input exit point name:" },
          "description": { "i18n": true, "str": "Exit point 1 name:" },
          "//default_text": { "i18n": true, "str": "First exit" },
          "width": 35,
          "identifier": ""
        },
        "target_var": { "u_val": "u_var_kasen_fangshu_1_name" }
      },
      { "u_location_variable": { "global_val": "var_kasen_fangshu_1" } },
      { "u_message": "You set an exit point at the location.", "type": "mixed" },
      { "math": [ "u_var_kasen_fangshu_placed_1", "=", "1" ] },
      { "math": [ "u_val('mana')", "-=", "133" ] }
    ],
    "//": "Not exaclty sure how, but thankfully the u_VAR_NAMEs get reset when kasen_fangshu_delete_eoc is run. I'm assuming it's because they're stored as u_ , but still why?"
  },
  {
    "id": "kasen_fangshu_set_2",
    "type": "effect_on_condition",
    "effect": [ 
      {
        "set_string_var": "Exit point 2",
        "string_input": {
          "title": { "i18n": true, "str": "Input exit point name:" },
          "description": { "i18n": true, "str": "Exit point 2 name:" },
          "//default_text": { "i18n": true, "str": "Second exit" },
          "width": 35,
          "identifier": ""
        },
        "target_var": { "u_val": "u_var_kasen_fangshu_2_name" }
      },
      { "u_location_variable": { "global_val": "var_kasen_fangshu_2" } },
      { "u_message": "You set an exit point at the location.", "type": "mixed" },
      { "math": [ "u_var_kasen_fangshu_placed_2", "=", "1" ] },
      { "math": [ "u_val('mana')", "-=", "133" ] }
    ]
  },
  {
    "id": "kasen_fangshu_set_3",
    "type": "effect_on_condition",
    "effect": [ 
      {
        "set_string_var": "Exit point 3",
        "string_input": {
          "title": { "i18n": true, "str": "Input exit point name:" },
          "description": { "i18n": true, "str": "Exit point 3 name:" },
          "//default_text": { "i18n": true, "str": "Third exit" },
          "width": 35,
          "identifier": ""
        },
        "target_var": { "u_val": "u_var_kasen_fangshu_3_name" }
      },
      { "u_location_variable": { "global_val": "var_kasen_fangshu_3" } },
      { "u_message": "You set an exit point at the location.", "type": "mixed" },
      { "math": [ "u_var_kasen_fangshu_placed_3", "=", "1" ] },
      { "math": [ "u_val('mana')", "-=", "133" ] }
    ]
  },
  {
    "id": "kasen_fangshu_delete_eoc",
    "type": "effect_on_condition",
    "condition": {
      "or": [
        { "math": [ "u_var_kasen_fangshu_placed_1", ">=", "1" ] },
        { "math": [ "u_var_kasen_fangshu_placed_2", ">=", "1" ] },
        { "math": [ "u_var_kasen_fangshu_placed_3", ">=", "1" ] }
      ]
    },
    "effect": [
      {
        "run_eoc_selector": [
          "kasen_fangshu_delete_confirmed"
        ],
        "title": "Delete all exit points",
        "names": [
          "Delete exit points?"
        ],
        "keys": [ "1" ],
        "descriptions": [
          "<color_yellow>Warning:</color> this cannot be undone."
        ],
        "hide_failing": true,
        "allow_cancel": true
      }
    ]
  },
  {
    "id": "kasen_fangshu_delete_confirmed",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "u_var_kasen_fangshu_placed_1", "=", "0" ] },
      { "math": [ "u_var_kasen_fangshu_placed_2", "=", "0" ] },
      { "math": [ "u_var_kasen_fangshu_placed_3", "=", "0" ] },
      { "u_message": "All exit points have been reset.", "type": "mixed" }
    ]
  },
  {
    "id": "kasen_parry_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "u_var_kasenparry", "=", "1" ] },
      { "u_add_effect": "parry_effect", "duration": "2 s" },
      {
        "queue_eocs": [
          {
            "id": "kasen_parry_timer",
            "effect": [
              { "math": [ "u_var_kasenparry", "=", "0" ] },
              { "u_lose_effect": "parry_effect" }
            ]
          }
        ],
        "time_in_future": "2 s"
      }
    ],
    "//": "This EOC is a the same as meiling_mountainbreak_eoc "
  },
  {
    "id": "kasen_rainboworb_eoc",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_val('mana')", ">=", "100" ] },
    "effect": [
      {
        "if": {
          "message": "Set target", 
          "range": 5,
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_kasen_rainboworb_loc" }
        },
        "then": [
          { "u_cast_spell": { "id": "kasen_rainboworb2" }, "loc": { "global_val": "var_kasen_rainboworb_loc" } },
          { 
            "queue_eoc_with": "kasen_rainboworb_delay", 
            "variables": { "rainboworb_loc": "var_kasen_rainboworb_loc" }, 
            "time_in_future": "2 s" 
          },
          { 
            "queue_eoc_with": "kasen_rainboworb_delay", 
            "variables": { "rainboworb_loc": "var_kasen_rainboworb_loc" }, 
            "time_in_future": "3 s" 
          },
          { "math": [ "u_val('mana')", "-=", "100" ] }
        ],
        "else": { "u_message": "Canceled" }
      }
    ],
    "false_effect": [ 
      { "u_message": "You don't have enough mana.", "type": "mixed" }
    ]
  },
  {
    "id": "kasen_rainboworb_delay",
    "type": "effect_on_condition",
    "condition": { "expects_vars": [ "rainboworb_loc" ] },
    "effect": [
      { "u_cast_spell": { "id": "kasen_rainboworb3" }, "loc": { "global_val": "var_kasen_rainboworb_loc" } }
    ]
  },
  {
    "id": "kasen_summon_pet_eoc",
    "type": "effect_on_condition",
    "condition": {
      "or": [
        { "math": [ "u_monsters_nearby('mon_houso', 'radius': 960, 'attitude': 'friendly')", "==", "0" ] },
        { "math": [ "u_monsters_nearby('mon_kanda', 'radius': 960, 'attitude': 'friendly')", "==", "0" ] },
        { "math": [ "u_monsters_nearby('mon_koutei', 'radius': 960, 'attitude': 'friendly')", "==", "0" ] },
        { "math": [ "u_monsters_nearby('mon_mukou', 'radius': 960, 'attitude': 'friendly')", "==", "0" ] }
      ]
    },
    "effect": [ 
      {
        "if": {
          "message": "Set target", 
          "range": 5,
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_kasen_summon_pet_loc" }
        },
        "then": [ { "run_eocs": [ "kasen_summon_pet_check_repeater" ] } ],
        "else": { "u_message": "Canceled" }
      }
    ],
    "false_effect": [ 
      { "u_message": "You have already summoned all your pets.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "50" ] }
    ],
    "//": "This EOC checks if ALL her pets have been summoned, if at least one is missing it runs the next EOC",
    "//2": "The next is a repeater, which randomly runs one of four 'check if this pet is missing, if it is then summon it, if it not missing re-run the repeater'"
  },
  {
    "id": "kasen_summon_pet_check_repeater",
    "type": "effect_on_condition",
    "effect": [ 
      {
        "weighted_list_eocs": [
          [ "kasen_summon_pet_check_1", 1 ],
          [ "kasen_summon_pet_check_2", 1 ],
          [ "kasen_summon_pet_check_3", 1 ],
          [ "kasen_summon_pet_check_4", 1 ]
        ]
      }
    ]
  },
  {
    "id": "kasen_summon_pet_check_1",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_monsters_nearby('mon_houso', 'radius': 960, 'attitude': 'friendly')", "==", "0" ] },
    "effect": [ { "u_cast_spell": { "id": "kasen_summon_pet_1" }, "loc": { "global_val": "var_kasen_summon_pet_loc" } } ],
    "false_effect": [ { "run_eocs": [ "kasen_summon_pet_check_repeater" ] } ]
  },
  {
    "id": "kasen_summon_pet_check_2",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_monsters_nearby('mon_kanda', 'radius': 960, 'attitude': 'friendly')", "==", "0" ] },
    "effect": [ { "u_cast_spell": { "id": "kasen_summon_pet_2" }, "loc": { "global_val": "var_kasen_summon_pet_loc" } } ],
    "false_effect": [ { "run_eocs": [ "kasen_summon_pet_check_repeater" ] } ]
  },
  {
    "id": "kasen_summon_pet_check_3",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_monsters_nearby('mon_koutei', 'radius': 960, 'attitude': 'friendly')", "==", "0" ] },
    "effect": [ { "u_cast_spell": { "id": "kasen_summon_pet_3" }, "loc": { "global_val": "var_kasen_summon_pet_loc" } } ],
    "false_effect": [ { "run_eocs": [ "kasen_summon_pet_check_repeater" ] } ]
  },
  {
    "id": "kasen_summon_pet_check_4",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_monsters_nearby('mon_mukou', 'radius': 960, 'attitude': 'friendly')", "==", "0" ] },
    "effect": [ { "u_cast_spell": { "id": "kasen_summon_pet_4" }, "loc": { "global_val": "var_kasen_summon_pet_loc" } } ],
    "false_effect": [ { "run_eocs": [ "kasen_summon_pet_check_repeater" ] } ]
  },
  {
    "id": "kokoro_backsweep_eoc",
    "type": "effect_on_condition",
    "condition": {
      "or": [
        { "u_has_wielded_with_weapon_category": "LONG_SWORDS" },
        { "u_has_wielded_with_weapon_category": "GREAT_SWORDS" },
        { "u_has_wielded_with_weapon_category": "QUARTERSTAVES" },
        { "u_has_wielded_with_weapon_category": "SPEARS" },
        { "u_has_wielded_with_weapon_category": "POLEARMS" },
        { "u_has_wielded_with_weapon_category": "GREAT_AXES" }
      ]
    },
    "effect": [
      { "run_eocs": [ "kokoro_backsweep_check" ] }
    ],
    "false_effect": [ 
      { "u_message": "You don't have any 2h weapons equipped.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "75" ] }
    ],
    "//": "Simple EOC just checks if Kokoro is wielding any 2h, if she isn't the cast fails"
  },
  {
    "id": "kokoro_backsweep_check",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "var_melee_bash_dmg", ">=", "var_melee_cut_dmg" ] },
        { "math": [ "var_melee_bash_dmg", ">=", "var_melee_stab_dmg" ] }
      ]
    },
    "effect": [
      { "u_cast_spell": { "id": "kokoro_backsweep2_bash" }, "targeted": true }
    ],
    "false_effect": [ { "run_eocs": [ "kokoro_backsweep_check2" ] } ],
    "//": "These chained EOCs check which of bash, cut or stab is higher, and casts a different spell accordingly"
  },
  {
    "id": "kokoro_backsweep_check2",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "var_melee_cut_dmg", ">=", "var_melee_bash_dmg" ] },
        { "math": [ "var_melee_cut_dmg", ">=", "var_melee_stab_dmg" ] }
      ]
    },
    "effect": [
      { "u_cast_spell": { "id": "kokoro_backsweep2_cut" }, "targeted": true }
    ],
    "false_effect": [ { "run_eocs": [ "kokoro_backsweep_check3" ] } ]
  },
  {
    "id": "kokoro_backsweep_check3",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "var_melee_stab_dmg", ">=", "var_melee_bash_dmg" ] },
        { "math": [ "var_melee_stab_dmg", ">=", "var_melee_cut_dmg" ] }
      ]
    },
    "effect": [
      { "u_cast_spell": { "id": "kokoro_backsweep2_stab" }, "targeted": true }
    ]
  },
  {
    "id": "kokoro_quick_attack_eoc",
    "type": "effect_on_condition",
    "condition": {
      "or": [
        { "u_has_wielded_with_weapon_category": "BATONS" },
        { "u_has_wielded_with_weapon_category": "HAND_AXES" },
        { "u_has_wielded_with_weapon_category": "SHORT_SWORDS" },
        { "u_has_wielded_with_weapon_category": "MEDIUM_SWORDS" },  
        { "u_has_wielded_with_weapon_category": "LONG_SWORDS" },
        { "u_has_wielded_with_weapon_category": "GREAT_SWORDS" },
        { "u_has_wielded_with_weapon_category": "QUARTERSTAVES" },
        { "u_has_wielded_with_weapon_category": "SPEARS" },
        { "u_has_wielded_with_weapon_category": "POLEARMS" },
        { "u_has_wielded_with_weapon_category": "GREAT_AXES" }
      ]
    },
    "effect": [
      { "run_eocs": [ "kokoro_quick_attack_check" ] }
    ],
    "false_effect": [ 
      { "u_message": "You're not using any compatible weapons.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "75" ] }
    ],
    "//": "Based on kokoro_backsweep_eoc . Checks if Kokoro is wielding any weapon allowed by her MA, if she isn't the cast fails"
  },
  {
    "id": "kokoro_quick_attack_check",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "var_melee_bash_dmg", ">=", "var_melee_cut_dmg" ] },
        { "math": [ "var_melee_bash_dmg", ">=", "var_melee_stab_dmg" ] }
      ]
    },
    "effect": [
      { "u_cast_spell": { "id": "kokoro_quick_attack2_bash" }, "targeted": true }
    ],
    "false_effect": [ { "run_eocs": [ "kokoro_quick_attack_check2" ] } ]
  },
  {
    "id": "kokoro_quick_attack_check2",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "var_melee_cut_dmg", ">=", "var_melee_bash_dmg" ] },
        { "math": [ "var_melee_cut_dmg", ">=", "var_melee_stab_dmg" ] }
      ]
    },
    "effect": [
      { "u_cast_spell": { "id": "kokoro_quick_attack2_cut" }, "targeted": true }
    ],
    "false_effect": [ { "run_eocs": [ "kokoro_quick_attack_check3" ] } ]
  },
  {
    "id": "kokoro_quick_attack_check3",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "var_melee_stab_dmg", ">=", "var_melee_bash_dmg" ] },
        { "math": [ "var_melee_stab_dmg", ">=", "var_melee_cut_dmg" ] }
      ]
    },
    "effect": [
      { "u_cast_spell": { "id": "kokoro_quick_attack2_stab" }, "targeted": true }
    ]
  },
  {
    "id": "kokoro_spirit_naginata_eoc",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_spirit_naginata", "<", "1" ] },
    "effect": [ 
      { "math": [ "var_spirit_naginata", "+=", "1" ] },
      { "u_message": "You materialize your spirit naginata.", "type": "good" },
      { "u_cast_spell": { "id": "kokoro_spirit_naginata2" } },
      { "queue_eocs": [ "kokoro_spirit_naginata_timer_eoc" ], "time_in_future": { "math": [ "( ( ( (u_skill('stabbing') * 90 ) + (u_skill('melee') * 90 ) + 240 ) * var_kokoro_melancholy_mod ) / 100 ) - 1" ] } }
    ],
    "false_effect": [ 
      { "u_message": "Your naginata is already materialized.", "type": "mixed" }
    ],
    "//": "Simplified version of remilia_gungnir_eoc , to prevent Kokoro from summoning more than one spirit naginata",
    "//2": "No dismiss spell as it lasts for very short and costs very little anyways"
  },
  {
    "id": "kokoro_spirit_naginata_timer_eoc",
    "type": "effect_on_condition",
    "effect": [ { "math": [ "var_spirit_naginata", "=", "0" ] } ]
  },
  {
    "id": "kokoro_throw_weapon_eoc",
    "type": "effect_on_condition",
    "condition": "u_has_weapon",
    "effect": [
      {
        "if": {
          "message": "Set target", 
          "range": { "math": [ "( min( ( max( u_skill('melee'), u_skill('dodge'), u_skill('throw') ) * 2 ), 24 ) * var_kokoro_deter_aoe_mod )" ] },
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_kokoro_throw_weapon_loc" }
        },
        "then": { "run_eocs": [ "kokoro_throw_weapon_check_eoc" ] },
        "else": [
          { "math": [ "u_val('mana')", "+=", "75" ] },
          { "u_message": "Canceled" }
        ]
      }
    ],
    "false_effect": [ 
      { "u_message": "You're not wielding any weapon.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "75" ] }
    ],
    "//": "Based on kokoro_backsweep_eoc . Checks if Kokoro is wielding anything, as u_has_weapon applies to anything, not just weapons. This is a fortuitous coincidence",
    "//2": "Then it sets the target's location, and runs the dmg type checks",
    "//3": "After the dmg check and spell cast, the teleport EOC is run, to simulate Kokoro throwing the weapon"
  },
  {
    "id": "kokoro_throw_weapon_check_eoc",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "var_melee_bash_dmg", ">=", "var_melee_cut_dmg" ] },
        { "math": [ "var_melee_bash_dmg", ">=", "var_melee_stab_dmg" ] }
      ]
    },
    "effect": [
      { "u_cast_spell": { "id": "kokoro_throw_weapon2_bash" }, "loc": { "global_val": "var_kokoro_throw_weapon_loc" } },
      { "run_eocs": [ "kokoro_throw_weapon_teleport_eoc" ] }
    ],
    "false_effect": [ { "run_eocs": [ "kokoro_throw_weapon_check2_eoc" ] } ]
  },
  {
    "id": "kokoro_throw_weapon_check2_eoc",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "var_melee_cut_dmg", ">=", "var_melee_bash_dmg" ] },
        { "math": [ "var_melee_cut_dmg", ">=", "var_melee_stab_dmg" ] }
      ]
    },
    "effect": [
      { "u_cast_spell": { "id": "kokoro_throw_weapon2_cut" }, "loc": { "global_val": "var_kokoro_throw_weapon_loc" } },
      { "run_eocs": [ "kokoro_throw_weapon_teleport_eoc" ] }
    ],
    "false_effect": [ { "run_eocs": [ "kokoro_throw_weapon_check3_eoc" ] } ]
  },
  {
    "id": "kokoro_throw_weapon_check3_eoc",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "var_melee_stab_dmg", ">=", "var_melee_bash_dmg" ] },
        { "math": [ "var_melee_stab_dmg", ">=", "var_melee_cut_dmg" ] }
      ]
    },
    "effect": [
      { "u_cast_spell": { "id": "kokoro_throw_weapon2_stab" }, "loc": { "global_val": "var_kokoro_throw_weapon_loc" } },
      { "run_eocs": [ "kokoro_throw_weapon_teleport_eoc" ] }
    ]
  },
  {
    "id": "kokoro_throw_weapon_teleport_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "u_run_inv_eocs": "all",
        "search_data": [ { "wielded_only": true } ],
        "true_eocs": [ 
          { 
            "id": "kokoro_throw_weapon_teleport_2_eoc", 
            "effect": [ { "npc_teleport": { "global_val": "var_kokoro_throw_weapon_loc" } } ]
          }
        ]
      }
    ],
    "//": "This takes the weapon from her hands and places it at the location",
    "//2": "Should be stopped by the first monster in the line. Kokoro is just that good as a weaponmaster"
  },
  {
    "id": "kokoro_unleash_emotion_eoc",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "not": { "math": [ "var_kokoro_stance", "==", "0" ] } },
        { "not": { "math": [ "var_kokoro_stance", "==", "3" ] } }
      ]
    },
    "effect": [
      {
        "run_eocs": [
          {
            "id": "kokoro_unleash_emotion_happiness",
            "condition": { "math": [ "var_kokoro_mask", "==", "0" ] },
            "effect": [
              { "math": [ "var_kokoro_instability", "-=", "60 + rand(60)" ] },
              { "u_cast_spell": { "id": "kokoro_unleash_emotion0" }, "targeted": false }
            ]
          },
          {
            "id": "kokoro_unleash_emotion_determination",
            "condition": { "math": [ "var_kokoro_mask", "==", "1" ] },
            "effect": [
              { "math": [ "var_kokoro_instability", "-=", "60 + rand(60)" ] },
              { "u_cast_spell": { "id": "kokoro_unleash_emotion1" }, "targeted": false }
            ]
          },
          {
            "id": "kokoro_unleash_emotion_melancholy",
            "condition": { "math": [ "var_kokoro_mask", "==", "2" ] },
            "effect": [
              { "math": [ "var_kokoro_instability", "-=", "60 + rand(60)" ] },
              { "u_cast_spell": { "id": "kokoro_unleash_emotion2" }, "targeted": false }
            ]
          },
          {
            "id": "kokoro_unleash_emotion_anger",
            "condition": { "math": [ "var_kokoro_mask", "==", "3" ] },
            "effect": [
              { "math": [ "var_kokoro_instability", "-=", "60 + rand(60)" ] },
              { "u_cast_spell": { "id": "kokoro_unleash_emotion3" }, "targeted": false }
            ]
          }
        ]
      }
    ],
    "false_effect": [ { "run_eocs": [ "kokoro_unleash_emotion_check" ] } ],
    "//": "EOC just checks if Kokoro isn't in her neutral or unstable stances, checks which mask she's wearing and casts the appropiate spell. Otherwise..."
  },
  {
    "id": "kokoro_unleash_emotion_check",
    "type": "effect_on_condition",
    "effect": [
      {
        "run_eocs": [
          {
            "id": "kokoro_unleash_emotion_neutral",
            "condition": { "math": [ "var_kokoro_stance", "==", "0" ] },
            "effect": [
              { "u_message": "You have no mask equipped.", "type": "mixed" },
              { "math": [ "u_val('mana')", "+=", "100" ] }
            ]
          },
          {
            "id": "kokoro_unleash_emotion_unstable",
            "condition": { "math": [ "var_kokoro_stance", "==", "3" ] },
            "effect": [
              { 
                "run_eocs": [
                  {
                    "id": "kokoro_unleash_emotion_unstable_rand",
                    "effect": [
                      { "math": [ "var_kokoro_happiness_rand", "=", "rand(1)" ] },
                      { "math": [ "var_kokoro_determination_rand", "=", "rand(1)" ] },
                      { "math": [ "var_kokoro_melancholy_rand", "=", "rand(1)" ] },
                      { "math": [ "var_kokoro_anger_rand", "=", "rand(1)" ] },
                      { "math": [ "var_kokoro_unleash_emotion", "=", "rand(3)" ] },
                      { 
                        "run_eocs": [ 
                          {
                            "id": "kokoro_unleash_emotion_unstable_0",
                            "condition": { "math": [ "var_kokoro_happiness_rand", "==", "0" ] },
                            "effect": [ 
                              { "math": [ "var_kokoro_happiness", "=", "1" ] } 
                            ],
                            "false_effect": [ { "math": [ "var_kokoro_happiness_boost", "=", "1" ] }  ]
                          },
                          {
                            "id": "kokoro_unleash_emotion_unstable_1",
                            "condition": { "math": [ "var_kokoro_determination_rand", "==", "0" ] },
                            "effect": [ 
                              { "math": [ "var_kokoro_determination", "=", "1" ] } 
                            ],
                            "false_effect": [ { "math": [ "var_kokoro_determination_boost", "=", "1" ] }  ]
                          },
                          {
                            "id": "kokoro_unleash_emotion_unstable_2",
                            "condition": { "math": [ "var_kokoro_melancholy_rand", "==", "0" ] },
                            "effect": [ 
                              { "math": [ "var_kokoro_melancholy", "=", "1" ] } 
                            ],
                            "false_effect": [ { "math": [ "var_kokoro_melancholy_boost", "=", "1" ] }  ]
                          },
                          {
                            "id": "kokoro_unleash_emotion_unstable_3",
                            "condition": { "math": [ "var_kokoro_anger_rand", "==", "0" ] },
                            "effect": [ 
                              { "math": [ "var_kokoro_anger", "=", "1" ] } 
                            ],
                            "false_effect": [ { "math": [ "var_kokoro_anger_boost", "=", "1" ] }  ]
                          }
                        ] 
                      }
                    ]
                  },
                  {
                    "id": "kokoro_unleash_emotion_unstable_cast",
                    "effect": [ 
                      {
                        "switch": { "math": [ "var_kokoro_unleash_emotion" ] },
                        "cases": [
                          { "case": 0, "effect": { "u_cast_spell": { "id": "kokoro_unleash_emotion0" } } },
                          { "case": 1, "effect": { "u_cast_spell": { "id": "kokoro_unleash_emotion1" } } },
                          { "case": 2, "effect": { "u_cast_spell": { "id": "kokoro_unleash_emotion2" } } },
                          { "case": 3, "effect": { "u_cast_spell": { "id": "kokoro_unleash_emotion3" } } }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "//": "This monstrosity runs. If Kokoro is in her neutral stance it refunds some mana",
    "//2": "However, if she's at her unstable stance it randomizes vars for each mask (to select the base or boost effect), then randomizes the unleash_emotion",
    "//3": "This causes her unleash_emotion spells while unstable to not just be random, but also have random mask mod effects, independent of the current mask she's wearing",
    "//4": "Also, also this has the side effect of randomizing the mask mods until the next mask refresh, or until she recasts this"
  },
  {
    "id": "meiling_mountainbreak_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "u_var_mountainbreak", "=", "1" ] },
      { "u_add_effect": "parry_effect", "duration": "2 s" },
      {
        "queue_eocs": [
          {
            "id": "meiling_mountainbreak_timer",
            "effect": [
              { "math": [ "u_var_mountainbreak", "=", "0" ] },
              { "u_lose_effect": "parry_effect" }
            ]
          }
        ],
        "time_in_future": "2 s"
      }
    ],
    "//": "When the spell is cast, this sets the u_CASTED_PARRY var to 1, adds the 'protect yourself from any attack' effect, and prepares to reset the system after 2 s",
    "//2": "The var is linked to meiling_mountainbreak_hit_eoc "
  },
  {
    "id": "meiling_tigerrelease_eoc",
    "type": "effect_on_condition",
    "condition": { "not": { "u_has_effect": "aura_tigerrelease" } },
    "effect": [ 
      { "math": [ "var_meiling_tigerrelease", "+=", "1" ] },
      { "run_eocs": [ "meiling_tigerrelease_cycle1" ] } 
    ],
    "false_effect": [ 
      { "math": [ "var_meiling_tigerrelease", "=", "0" ] },
      { "u_lose_effect": "aura_tigerrelease" }
    ],
    "//": "This EOC is a simplified version of utsuho_fusionblade_eoc "
  },
  {
    "id": "meiling_tigerrelease_cycle1",
    "type": "effect_on_condition",
    "condition": { 
      "and": [
        { "not": "u_has_weapon" },
        { "math": [ "var_meiling_tigerrelease", "<", "2" ] }
      ]
    },
    "effect": [ 
      { "run_eocs": [ "meiling_tigerrelease_cycle2" ] } 
    ],
    "false_effect": [ 
      { "math": [ "var_meiling_tigerrelease", "=", "0" ] },
      { "u_lose_effect": "aura_tigerrelease" }
    ]
  },
  {
    "id": "meiling_tigerrelease_cycle2",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_meiling_tigerrelease", ">", "0" ] },
    "effect": [ 
      { "u_add_effect": "aura_tigerrelease", "duration": "2 s" },
      { "queue_eocs": [ "meiling_tigerrelease_cycle1" ], "time_in_future": "1 s" } 
    ],
    "false_effect": [ 
      { "math": [ "var_meiling_tigerrelease", "=", "0" ] },
      { "u_lose_effect": "aura_tigerrelease" }
    ]
  },
  {
    "id": "mokou_combustion_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "run_eocs": [ "mokou_combustion_cycle1" ] }
    ],
    "//": "This EOC is a simplified version of utsuho_fissionaura_eoc "
  },
  {
    "id": "mokou_combustion_cycle1",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_mokou_combustion", "<", "5" ] },
    "effect": [ 
      { "u_cast_spell": { "id": "mokou_combustion2" }, "targeted": false },
      { "run_eocs": [ "mokou_combustion_cycle2" ] }
    ],
    "false_effect": [ { "math": [ "var_mokou_combustion", "=", "0" ] } ]
  },
  {
    "id": "mokou_combustion_cycle2",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "var_mokou_combustion", "+=", "1" ] },
      { "math": [ "u_pain()", "-=", "2" ] },
      { "queue_eocs": [ "mokou_combustion_cycle1" ], "time_in_future": "3 s" }
    ]
  },
  {
    "id": "nitori_aerialtorpedoes_eoc",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_val('mana')", ">=", "100" ] },
    "effect": [
      {
        "if": {
          "message": "Set target", 
          "range": 20,
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_nitori_atorpedo_loc" }
        },
        "then": [
          { 
            "queue_eoc_with": "nitori_aerialtorpedoes_impact", 
            "variables": { "atorpedo_loc": "var_nitori_atorpedo_loc" }, 
            "time_in_future": "3 s" 
          },
          { 
            "queue_eoc_with": "nitori_aerialtorpedoes_impact2", 
            "variables": { "atorpedo_loc": "var_nitori_atorpedo_loc" }, 
            "time_in_future": "5 s" 
          },
          { 
            "queue_eoc_with": "nitori_aerialtorpedoes_impact3", 
            "variables": { "atorpedo_loc": "var_nitori_atorpedo_loc" }, 
            "time_in_future": "7 s" 
          },
          { "math": [ "u_val('mana')", "-=", "100" ] }
        ],
        "else": { "u_message": "Canceled" }
      }
    ],
    "false_effect": [ 
      { "u_message": "You don't have enough mana.", "type": "mixed" }
    ],
    "//": "Basic spell-at-location, queue'd in 2 s. It asks the position (saves coordinates) -> queues the actual spell as '_eoc_with' (below)",
    "//2": "While run_eoc_with detects (*) both global_val and context_val , queue_eoc_with doesn't detect (*) context_val and casts it centered on Nitori",
    "//3": "(*) if debugging with u_message it shows the coordinates, which are missing for the queue_eoc_with + context_val combination . Maybe they're lost due the delay?"
  },
  {
    "id": "nitori_aerialtorpedoes_impact",
    "type": "effect_on_condition",
    "condition": { "expects_vars": [ "atorpedo_loc" ] },
    "effect": [
      { "u_cast_spell": { "id": "nitori_aerialtorpedoes2" }, "loc": { "global_val": "var_nitori_atorpedo_loc" } }
    ]
  },
  {
    "id": "nitori_aerialtorpedoes_impact2",
    "type": "effect_on_condition",
    "condition": { "expects_vars": [ "atorpedo_loc" ] },
    "effect": [
      { "u_cast_spell": { "id": "nitori_aerialtorpedoes2" }, "loc": { "global_val": "var_nitori_atorpedo_loc" } }
    ]
  },
  {
    "id": "nitori_aerialtorpedoes_impact3",
    "type": "effect_on_condition",
    "condition": { "expects_vars": [ "atorpedo_loc" ] },
    "effect": [
      { "u_cast_spell": { "id": "nitori_aerialtorpedoes2" }, "loc": { "global_val": "var_nitori_atorpedo_loc" } }
    ]
  },
  {
    "id": "nitori_extendo_arm_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "if": {
          "message": "Set target", 
          "range": { "math": [ "( u_skill('mechanics') + 1 )" ] },
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_extendo_arm_loc" }
        },
        "then": [
          { "run_eocs": [ "nitori_extendo_arm_creature_check" ] },
          { "run_eocs": [ "nitori_extendo_arm_item_check" ] },
          { "run_eocs": [ "nitori_extendo_arm_refund_check" ] }
        ],
        "else": [
          { "math": [ "u_val('mana')", "+=", "75" ] },
          { "u_message": "Canceled" }
        ]
      }
    ],
    "//": "This first saves the target's location, then sequentially checks for creatures (NPCs, monsters), and then another to check for items"
  },
  {
    "id": "nitori_extendo_arm_creature_check",
    "type": "effect_on_condition",
    "effect": [ 
      { "u_cast_spell": { "id": "nitori_extendo_arm_creature_spell" }, "loc": { "global_val": "var_extendo_arm_loc" } }
    ],
    "//": "If there's a creature at the location, Nitori casts this spell on them, which forces to run the next EOC",
    "//2": "(This is because I couldn't figure out how to identify monsters at the location with EOCs instead. Last version with the (non-functional) attempt is 0.9.7.6)"
  },
  {
    "id": "nitori_extendo_arm_creature_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "u_location_variable": { "global_val": "var_extendo_arm_creature_loc" } },
      { 
        "run_eocs": [ 
          {
            "id": "nitori_extendo_arm_pulling_1",
            "condition": { "math": [ "n_val('weight')", ">=", "u_val('weight')" ] },
            "effect": [ 
              { "u_cast_spell": { "id": "nitori_extendo_arm2" } },
              { "npc_cast_spell": { "id": "nitori_extendo_arm_pull" }, "loc": { "global_val": "var_extendo_arm_creature_loc" } },
              { "npc_message": "You pull your target towards you!", "type": "good" }
            ],
            "false_effect": [ 
              { "u_cast_spell": { "id": "nitori_extendo_arm2" } },
              { "npc_cast_spell": { "id": "nitori_extendo_arm_self_pull" }, "loc": { "global_val": "var_extendo_arm_creature_loc" } },
              { "npc_message": "You pull yourself towards your target!", "type": "mixed" }
            ]
          }
        ] 
      },
      { "math": [ "nitori_extendo_arm_pulledsomething", "+=", "1" ] }
    ],
    "//": "If there's no creature at the location, the previous EOC -> spell is not cast and this EOC is not run. This is run by the target, so n/npc_ here is Nitori",
    "//2": "This checks if Nitori is heavier than the targeted creature, and either pulls it or pulls herself",
    "//3": "It also forces the target to cast the qol self stun",
    "//4": "Then, it adds the var_PULLEDSOMETHING , used further downstream"
  },
  {
    "id": "nitori_extendo_arm_item_check",
    "type": "effect_on_condition",
    "effect": [
      {
        "u_map_run_item_eocs": "all",
        "//search_data": [  ],
        "loc": { "global_val": "var_extendo_arm_loc" },
        "min_radius": 0,
        "max_radius": 0,
        "true_eocs": [ 
          {
            "id": "nitori_extendo_arm_pulling_2",
            "condition": { "math": [ "u_val('weight')", ">=", "n_val('weight')" ] },
            "effect": [ 
              { "u_cast_spell": { "id": "nitori_extendo_arm_pull" }, "loc": { "global_val": "var_extendo_arm_loc" } },
              { "u_message": "You pull your target towards you!", "type": "good" },
              { "math": [ "nitori_extendo_arm_pulledsomething", "+=", "1" ] }
            ],
            "false_effect": [ 
              { "u_cast_spell": { "id": "nitori_extendo_arm_self_pull" }, "loc": { "global_val": "var_extendo_arm_loc" } },
              { "u_message": "You pull yourself towards your target!", "type": "mixed" },
              { "math": [ "nitori_extendo_arm_pulledsomething", "+=", "1" ] }
            ]
          } 
        ]
      }
    ],
    "//2": "This checks for any items at the location, then checks if Nitori is heavier than the (heaviest) item, and either pulls herself or the items",
    "//": "Unlike the previous EOC, this is run by Nitori, so u_ is her",
    "//3": "It pulls anything in the stack. If there's a single heavier item, it runs for every item but ultimately only pulls herself. It doesn't pull items out of furniture or containers"
  },
  {
    "id": "nitori_extendo_arm_refund_check",
    "type": "effect_on_condition",
    "condition": { "math": [ "nitori_extendo_arm_pulledsomething", "==", "0" ] },
    "effect": [
      { "math": [ "u_val('mana')", "+=", "75" ] },
      { "u_message": "There's nothing to be pulled at the location.", "type": "mixed" },
      { "math": [ "nitori_extendo_arm_pulledsomething", "=", "0" ] }
    ],
    "false_effect": [ { "math": [ "nitori_extendo_arm_pulledsomething", "=", "0" ] } ],
    "//": "If there was no creature and no item at the location, Nitori refunds some cost"
  },
  {
    "id": "nitori_opticalcamouflage_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "var_nitoricamouflage", "+=", "1" ] },
      { "math": [ "var_nitoricamouflage_STOP", "=", "0" ] },
      { "run_eocs": [ "nitori_opticalcamouflage_cycle1" ] }
    ],
    "//": "This EOC is a modified version of utsuho_fissionaura_eoc . It adds a 'randomly fail' chance as extra step to make it more FUN",
    "//2": "A different approach to the cycling fixes the leak from the base aura",
    "//note": "And introduces a double stop issue. Has no effect other than printing the u_message twice"
  },
  {
    "id": "nitori_opticalcamouflage_cycle1",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_nitoricamouflage_fail", "<", "5250" ] },
    "effect": [
      { "run_eocs": [ "nitori_opticalcamouflage_cycle2" ] }
    ],
    "false_effect": [ { "run_eocs": [ "nitori_opticalcamouflage_failcheck" ] } ],
    "//": "A random amount of the var_fail is added every time the stealth effect is granted. On average, this value equals ~12.5% to fail over the full duration (I think)"
  },
  {
    "id": "nitori_opticalcamouflage_cycle2",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "var_nitoricamouflage", "<", "2" ] },
        { "math": [ "var_nitoricamouflage_STOP", "==", "0" ] }
      ]
    },
    "effect": [ { "run_eocs": [ "nitori_opticalcamouflage_cycle3" ] } ],
    "false_effect": [
      { "math": [ "var_nitoricamouflage", "=", "0" ] },
      { "math": [ "var_nitoricamouflage_fail", "=", "0" ] },
      { "math": [ "var_nitoricamouflage_STOP", "+=", "1" ] },
      { "u_lose_effect": "nitori_camouflage" },
      { "u_message": "You turn the optical camouflage OFF.", "type": "mixed" }
    ]
  },
  {
    "id": "nitori_opticalcamouflage_cycle3",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "u_val('mana')", ">=", "2" ] },
        { "math": [ "var_nitoricamouflage", ">", "0" ] },
        { "math": [ "var_nitoricamouflage_STOP", "==", "0" ] }
      ]
    },
    "effect": [
      { "math": [ "var_nitoricamouflage_fail", "+=", "1 + rand(9)" ] },
      { "math": [ "u_val('mana')", "-=", "3" ] },
      { "u_add_effect": "nitori_camouflage", "duration": "3 s" },
      { "queue_eocs": [ "nitori_opticalcamouflage_cycle1" ], "time_in_future": "2 s" }
    ],
    "false_effect": [
      { "math": [ "var_nitoricamouflage", "=", "0" ] },
      { "math": [ "var_nitoricamouflage_fail", "=", "0" ] },
      { "u_lose_effect": "nitori_camouflage" },
      { "u_message": "You're too exhausted and the optical camouflage deactivates!", "type": "mixed" }
    ],
    "//": "This consumes 90 mana/min = ~11 min of invisibility"
  },
  {
    "id": "nitori_opticalcamouflage_failcheck",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_nitoricamouflage", ">", "0" ] },
    "effect": [
      { "math": [ "var_nitoricamouflage_rand", "=", "rand(3)" ] },
      { "run_eocs": [ "nitori_opticalcamouflage_failcheck2" ] }
    ],
    "false_effect": [
      { "math": [ "var_nitoricamouflage", "=", "0" ] },
      { "math": [ "var_nitoricamouflage_fail", "=", "0" ] },
      { "u_lose_effect": "nitori_camouflage" }
    ],
    "//": "If the var_fail is higher than the number, it runs this which checks if the player has already toggled the aura, if not it runs the check to decide further effects"
  },
  {
    "id": "nitori_opticalcamouflage_failcheck2",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_nitoricamouflage_rand", "<", "3" ] },
    "effect": [
      { "u_lose_effect": "nitori_camouflage" },
      { "run_eocs": [ "nitori_opticalcamouflage_fail_1" ] }
    ],
    "false_effect": [
      { "math": [ "var_nitoricamouflage", "=", "0" ] },
      { "math": [ "var_nitoricamouflage_fail", "=", "0" ] },
      { "u_lose_effect": "nitori_camouflage" }
    ],
    "//": "3/4 for it to run a dummy effect, 1/4 for it to fail and deactivate without warning"
  },
  {
    "id": "nitori_opticalcamouflage_fail_1",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_nitoricamouflage_fail_timer", "<", "30" ] },
    "effect": [
      { "run_eocs": [ "nitori_opticalcamouflage_fail_2" ] }
    ],
    "false_effect": [ 
      { "math": [ "var_nitoricamouflage_fail", "=", "0" ] },
      { "u_lose_effect": "nitori_camouflage_fake" },
      { "run_eocs": [ "nitori_opticalcamouflage_cycle1" ] } 
    ],
    "//": "This limits the dummy cycle to 30 s, and returns it to the normal one, resetting the var_fail in the process"
  },
  {
    "id": "nitori_opticalcamouflage_fail_2",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_nitoricamouflage", "<", "2" ] },
    "effect": [ { "run_eocs": [ "nitori_opticalcamouflage_fail_3" ] } ],
    "false_effect": [
      { "math": [ "var_nitoricamouflage", "=", "0" ] },
      { "math": [ "var_nitoricamouflage_fail", "=", "0" ] },
      { "math": [ "var_nitoricamouflage_STOP", "-=", "3" ] },
      { "u_lose_effect": "nitori_camouflage" },
      { "u_lose_effect": "nitori_camouflage_fake" },
      { "u_message": "You turn the optical camouflage OFF.", "type": "mixed" }
    ]
  },
  {
    "id": "nitori_opticalcamouflage_fail_3",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "u_val('mana')", ">=", "2" ] },
        { "math": [ "var_nitoricamouflage", ">", "0" ] },
        { "math": [ "var_nitoricamouflage_STOP", ">", "3" ] }
      ]
    },
    "effect": [
      { "math": [ "var_nitoricamouflage_fail_timer", "+=", "1" ] },
      { "math": [ "u_val('mana')", "-=", "1.5" ] },
      { "u_add_effect": "nitori_camouflage_fake", "duration": "2 s" },
      { "queue_eocs": [ "nitori_opticalcamouflage_fail_1" ], "time_in_future": "1 s" }
    ],
    "false_effect": [
      { "math": [ "var_nitoricamouflage", "=", "0" ] },
      { "math": [ "var_nitoricamouflage_fail", "=", "0" ] },
      { "math": [ "var_nitoricamouflage_fail_timer", "=", "0" ] },
      { "u_lose_effect": "nitori_camouflage" },
      { "u_lose_effect": "nitori_camouflage_fake" },
      { "u_message": "You're too exhausted and the optical camouflage deactivates!", "type": "mixed" }
    ]
  },
  {
    "id": "nitori_toolswing_eoc",
    "type": "effect_on_condition",
    "condition": {
      "or": [
        { "u_has_wielded_with_weapon_category": "BATONS" },
        { "u_has_wielded_with_weapon_category": "HAND_AXES" }
      ]
    },
    "effect": [
      { "math": [ "var_toolswing", "=", "rand(1)" ] },
      { "run_eocs": [ "nitori_toolswing_check" ] }
    ],
    "false_effect": [ 
      { "u_message": "You're not using any compatible weapons.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "33" ] }
    ],
    "//": "This EOC is a simplified version of kokoro_quick_attack_eoc . There is no damage_type check as most tools are not sharp, not even the pickaxe",
    "//2": "The rand() number is used to decide if the spell will knock the enemy or not"
  },
  {
    "id": "nitori_toolswing_check",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_toolswing", "==", "0" ] },
    "effect": [ { "u_cast_spell": { "id": "nitori_toolswing_eoc2" }, "targeted": true } ],
    "false_effect": { "u_cast_spell": { "id": "nitori_toolswing_eoc3" }, "targeted": true }
  },
  {
    "id": "remilia_darkdrain2_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "var_remidrain", "=", "0" ] },
      {
        "run_eocs": [
          {
            "id": "remilia_darkdrain_human",
            "condition": {
              "or": [
                { "u_has_species": "FERAL" },
                { "u_has_species": "HUMAN" }
              ]
            },
            "effect": [ { "math": [ "var_remidrain", "=", "( (u_skill('stabbing') * 0.133 ) + (u_skill('melee') * 0.133 ) + (u_skill('dodge') * 0.133 ) + 2.404 )" ] } ]
          },
          {
            "id": "remilia_darkdrain_reduced",
            "condition": {
              "or": [
                { "u_has_flag": "ARTHROPOD_BLOOD" },
                { "u_has_species": "AMPHIBIAN" },
                { "u_has_species": "BIRD" },
                { "u_has_species": "CENTIPEDE" },
                { "u_has_species": "CYBORG" },
                { "u_has_species": "FISH" },
                { "u_has_species": "INSECT" },
                { "u_has_species": "INSECT_FLYING" },
                { "u_has_species": "KRAKEN" },
                { "u_has_species": "LEECH_PLANT" },
                { "u_has_species": "MAMMAL" },
                { "u_has_species": "MOLLUSK" },
                { "u_has_species": "MUTANT" },
                { "u_has_species": "PLANT" },
                { "u_has_species": "REPTILE" },
                { "u_has_species": "SPIDER" },
                { "u_has_species": "WORM" },
                { "u_has_species": "ZOMBIE" },
                { "u_has_trait": "BLEEDSLOW2" },
                { "u_has_trait": "INSECTBLOOD" },
                { "u_has_trait": "INVERTEBRATEBLOOD" },
                { "u_has_trait": "PLANTBLOOD" }
              ]
            },
            "effect": [ { "math": [ "var_remidrain", "=", "( ( (u_skill('stabbing') * 0.133 ) + (u_skill('melee') * 0.133 ) + (u_skill('dodge') * 0.133 ) + 2.404 ) * rng( 0.17, 0.66 ) )" ] } ]
          },
          {
            "id": "remilia_darkdrain_hazard",
            "condition": {
              "or": [
                { "u_has_flag": "ACID_BLOOD" },
                { "u_has_flag": "BILE_BLOOD" },
                { "u_has_flag": "DEADLY_VIRUS" },
                { "u_has_species": "FUNGUS" },
                { "u_has_species": "MIGO" },
                { "u_has_species": "NETHER" },
                { "u_has_trait": "ACIDBLOOD" }
              ]
            },
            "effect": [ { "math": [ "var_remidrain", "=", "( ( - (u_skill('stabbing') * 0.133 ) - (u_skill('melee') * 0.133 ) - (u_skill('dodge') * 0.133 ) - 2.404 ) * rng( 0.33, 0.5 ) )" ] } ]
          },
          {
            "id": "remilia_darkdrain_noblood",
            "condition": {
              "or": [
                { "u_has_species": "SLIME" },
                { "u_has_trait": "BLEED_IMMUNE" }
              ]
            },
            "effect": [ { "math": [ "var_remidrain", "=", "0" ] } ]
          }
        ]
      }
    ],
    "//": "Resets the var to 0 and checks for the species/traits of the target she's draining, and sets var -> sets less var -> sets negative var -> sets no var, accordingly to the blood they have",
    "//note": "Eventually, this will be improved by using #71956"
  },
  {
    "id": "remilia_darkdrain3_eoc",
    "type": "effect_on_condition",
    "effect": [ { "queue_eocs": [ "remilia_darkdrain_heal" ], "time_in_future": "3 s" } ],
    "//": "This runs at the same time (shortly after) the previous EOC. It just delays the self-heal spell by 3 s"
  },
  {
    "id": "remilia_darkdrain_heal",
    "type": "effect_on_condition",
    "effect": [ 
      { "u_cast_spell": { "id": "remilia_darkdrain4" }, "targeted": false },
      { "math": [ "u_vitamin('blood')", "+=", "var_remidrain * 1" ] },
      { "math": [ "u_vitamin('hblood_vitamin')", "+=", "var_remidrain * 1.5" ] }
    ]
  },
  {
    "id": "remilia_gungnir_eoc",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_gungnir", "<", "1" ] },
    "effect": [ 
      { "math": [ "var_gungnir", "+=", "1" ] },
      { "u_message": "You summon the Gungnir!", "type": "good" },
      { "u_cast_spell": { "id": "remilia_gungnir2" } },
      { "queue_eocs": [ "remilia_gungnir_timer_eoc" ], "time_in_future": { "math": [ "( (u_skill('stabbing') * 21 ) + (u_skill('melee') * 21 ) + 12 ) - 1" ] } }
    ],
    "false_effect": [ 
      { "u_message": "Your Gungnir is already summoned.", "type": "mixed" }
    ],
    "//": "Internal timer to prevent Remi from summoning more than one Gungnir"
  },
  {
    "id": "remilia_gungnir_timer_eoc",
    "type": "effect_on_condition",
    "effect": [ { "math": [ "var_gungnir", "=", "0" ] } ]
  },
  {
    "id": "remilia_gungnir_dismiss_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "if": { "u_has_wielded_with_flag": "REMI_GUNGNIR_FLAG" },
        "then": [
          {
            "u_run_inv_eocs": "all",
            "search_data": [ { "flags":  [ "REMI_GUNGNIR_FLAG" ], "wielded_only": true } ],
            "true_eocs": [
              {
                "id": "remilia_gungnir_dismiss_dismiss",
                "effect": [
                  "npc_die",
                  { "math": [ "u_val('mana')", "+=", "100" ] },
                  { "math": [ "var_gungnir", "=", "0" ] },
                  { "u_message": "You dismiss the Gungnir.", "type": "good" }
                ]
              }
            ]
          }
        ],
        "else": [ 
          { "u_message": "You can't dismiss your Gungnir if you don't have it in your hand.", "type": "mixed" }
        ]
      }
    ]
  },
  {
    "id": "remilia_vampiricaura_eoc",
    "type": "effect_on_condition",
    "condition": { "not": "u_has_weapon" },
    "effect": [
      { "run_eocs": [ "remilia_vampiricaura_togglecheck" ] }
    ],
    "false_effect": [ 
      { "u_message": "You cannot use this skill while wielding items.", "type": "mixed" }
    ],
    "//": "This EOC is a simplified version of utsuho_fusionblade_eoc ",
    "//2": "Different approach for effect-only aura-like effects",
    "//3": "First, it checks if the Meiling is wielding a weapon or already has the aura, if so it deactivates it",
    "//4": "Then, it casts the self spell that grants the effect for the duration, and runs the cycle to continuously check wielded items or re-activations of the EOC",
    "//5": "No timer as the effect has a fixed duration by the spell, also no toggle or oom EOCs as those don't apply"
  },
  {
    "id": "remilia_vampiricaura_togglecheck",
    "type": "effect_on_condition",
    "condition": { "not": { "u_has_effect": "aura_vampiric" } },
    "effect": [ 
      { "u_cast_spell": { "id": "remilia_vampiricaura2" }, "targeted": false },
      { "run_eocs": [ "remilia_vampiricaura_cycle1" ] } 
    ],
    "false_effect": [ 
      { "u_lose_effect": "aura_vampiric" }
    ]
  },
  {
    "id": "remilia_vampiricaura_cycle1",
    "type": "effect_on_condition",
    "condition": { "not": "u_has_weapon" },
    "effect": [ 
      { "run_eocs": [ "remilia_vampiricaura_cycle2" ] } 
    ],
    "false_effect": [ 
      { "u_lose_effect": "aura_vampiric" }
    ]
  },
  {
    "id": "remilia_vampiricaura_cycle2",
    "type": "effect_on_condition",
    "condition": { "u_has_effect": "aura_vampiric" },
    "effect": [ 
      { "queue_eocs": [ "remilia_vampiricaura_cycle1" ], "time_in_future": "1 s" }
    ],
    "false_effect": [ 
      { "u_lose_effect": "aura_vampiric" }
    ]
  },
  {
    "id": "sakuya_knifepull_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "u_location_variable": { "global_val": "sakuya_knifepull_loc" } },
      {
        "u_map_run_item_eocs": "all",
        "search_data": [ 
          { "id": "silver_knife" },
          { "id": "sakuya_knife" },
          { "id": "knife_combat" },
          { "id": "knife_huge" },
          { "id": "knife_small" },
          { "id": "knife_large" },
          { "id": "knife_cleaver" },
          { "id": "knife_folding" },
          { "id": "knife_combat_marine" },
          { "id": "knife_combat_army" },
          { "id": "knife_hunting" },
          { "id": "knife_KABAR" },
          { "id": "knife_rambo" },
          { "id": "ch_knife_rambo" },
          { "id": "hc_knife_rambo" },
          { "id": "lc_knife_rambo" },
          { "id": "mc_knife_rambo" },
          { "id": "qt_knife_rambo" },
          { "id": "knife_rm42" },
          { "id": "knife_swissarmy" },
          { "id": "knife_trench" },
          { "id": "ch_knife_trench" },
          { "id": "hc_knife_trench" },
          { "id": "lc_knife_trench" },
          { "id": "mc_knife_trench" },
          { "id": "qt_knife_trench" },
          { "id": "makeshift_knife" },
          { "id": "knife_baselard" },
          { "id": "kris" },
          { "id": "kris_fake" },
          { "id": "kukri" },
          { "id": "ch_kukri" },
          { "id": "hc_kukri" },
          { "id": "lc_kukri" },
          { "id": "mc_kukri" },
          { "id": "qt_kukri" },
          { "id": "tanto" },
          { "id": "tanto_inferior" },
          { "id": "tanto_fake" },
          { "id": "karambit" },
          { "id": "kirpan" },
          { "id": "enfield_bayonet" },
          { "id": "throwing_knife" },
          { "id": "copper_knife" },
          { "id": "bronze_knife" },
          { "id": "diveknife" },
          { "id": "primitive_knife" },
          { "id": "knife_butter" },
          { "id": "scalpel" },
          { "id": "xacto" },
          { "id": "boxcutter" }
        ],
        "loc": { "global_val": "sakuya_knifepull_loc" },
        "min_radius": 1,
        "max_radius": { "math": [ "( (u_skill('throw') * 0.8 ) + (u_skill('stabbing') * 0.8 ) + 1.6 )" ] },
        "true_eocs": [ 
          { 
            "id": "sakuya_knifepull_pull", 
            "effect": [ { "npc_teleport": { "global_val": "sakuya_knifepull_loc" } } ] 
          } 
        ]
      },
      { "u_message": "You elegantly retrieve nearby knives." }
    ],
    "//": "Adapted from EOC_map_item_test1 . The extremely long list *is* ugly",
    "//2": "max pull radius 8 - 24"
  },
  {
    "id": "sakuya_maidsecret_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "var_sakuyafocus", "+=", "1" ] },
      { "math": [ "var_sakuyaradius", "=", "( - (u_skill('stabbing') * 0.4 ) - (u_skill('dodge') * 0.4 ) + 16.8 )" ] },
      { "run_eocs": [ "sakuya_maidsecret_cycle1" ] }
    ],
    "//": "This EOC is a simplified version of udonge_waveinsight_start ",
    "//2": "var_sakuyaradius sets the detection radius to that formula, 14 - 6 tiles scaling down with higher (stabbing + dodge)"
  },
  {
    "id": "sakuya_maidsecret_cycle1",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_sakuyafocus", "<", "2" ] },
    "effect": [ { "run_eocs": [ "sakuya_maidsecret_cycle2" ] } ],
    "false_effect": [
      { "math": [ "var_sakuyafocus", "=", "0" ] },
      { "u_lose_effect": "sakuya_maidsecret_effect" }
    ]
  },
  {
    "id": "sakuya_maidsecret_cycle2",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "u_val('mana')", ">=", "100" ] },
        { "math": [ "u_val('stamina')", ">=", "2000" ] },
        { "math": [ "var_sakuyafocus", ">", "0" ] },
        { "math": [ "u_monsters_nearby('radius': var_sakuyaradius )", "<", "1" ] }
      ]
    },
    "effect": [
      { "math": [ "u_val('stamina')", "+=", "1" ] },
      { "u_add_effect": "sakuya_maidsecret_effect", "duration": "3 s" },
      { "queue_eocs": [ "sakuya_maidsecret_cycle1" ], "time_in_future": "2 s" }
    ],
    "false_effect": [
      { "u_message": "You lose your concentration.", "type": "mixed" },
      { "math": [ "var_sakuyafocus", "=", "0" ] },
      { "u_lose_effect": "sakuya_maidsecret_effect" }
    ]
  },
  {
    "id": "sakuya_vanishingeverything_eoc",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_sakuya_ve_casted", "==", "0" ] },
    "effect": [
      { "math": [ "var_sakuya_ve_casted", "+=", "1" ] },
      { "u_location_variable": { "global_val": "var_sakuya_ve_loc" } },
      { "u_cast_spell": { "id": "sakuya_vanishingeverything2" }, "targeted": true },
      { "queue_eocs": [ "sakuya_vanishingeverything_off" ], "time_in_future": "3 s" }
    ],
    "false_effect": [ 
      { "math": [ "var_sakuya_ve_casted", "=", "0" ] },
      { "u_teleport": { "global_val": "var_sakuya_ve_loc" } }
    ]
  },
  {
    "id": "sakuya_vanishingeverything_off",
    "type": "effect_on_condition",
    "effect": [ { "math": [ "var_sakuya_ve_casted", "=", "0" ] } ]
  },
  {
    "id": "seiga_shikaisenritual_eoc",
    "type": "effect_on_condition",
    "effect": [
      { 
        "u_location_variable": { "global_val": "var_shikaisenritual_loc" }, "furniture": "f_bed", "target_min_radius": 0, "target_max_radius": 1, 
        "true_eocs": [ "seiga_shikaisenritual_bed_found" ], 
        "false_eocs": [
          {
            "id": "seiga_shikaisenritual_1",
            "effect": [
              { 
                "u_location_variable": { "global_val": "var_shikaisenritual_loc" }, "furniture": "f_bunkbed", "target_min_radius": 0, "target_max_radius": 1, 
                "true_eocs": [ "seiga_shikaisenritual_bed_found" ], 
                "false_eocs": [
                  {
                    "id": "seiga_shikaisenritual_2",
                    "effect": [
                      {
                        "u_location_variable": { "global_val": "var_shikaisenritual_loc" }, "furniture": "f_bed_down", "target_min_radius": 0, "target_max_radius": 1, 
                        "true_eocs": [ "seiga_shikaisenritual_bed_found" ], 
                        "false_eocs": [
                          {
                            "id": "seiga_shikaisenritual_3",
                            "effect": [
                              {
                                "u_location_variable": { "global_val": "var_shikaisenritual_loc" }, "furniture": "f_bunkbed_down", "target_min_radius": 0, "target_max_radius": 1, 
                                "true_eocs": [ "seiga_shikaisenritual_bed_found" ], 
                                "false_eocs": [
                                  {
                                    "id": "seiga_shikaisenritual_4",
                                    "effect": [
                                      {
                                        "u_location_variable": { "global_val": "var_shikaisenritual_loc" }, "furniture": "f_triple_bunkbed", "target_min_radius": 0, "target_max_radius": 1, 
                                        "true_eocs": [ "seiga_shikaisenritual_bed_found" ], 
                                        "false_eocs": [
                                          {
                                            "id": "seiga_shikaisenritual_5",
                                            "effect": [
                                              {
                                                "u_location_variable": { "global_val": "var_shikaisenritual_loc" }, "furniture": "f_floor_mattress", "target_min_radius": 0, "target_max_radius": 1, 
                                                "true_eocs": [ "seiga_shikaisenritual_bed_found" ], 
                                                "false_eocs": [
                                                  {
                                                    "id": "seiga_shikaisenritual_6",
                                                    "effect": [
                                                      {
                                                        "u_location_variable": { "global_val": "var_shikaisenritual_loc" }, "furniture": "f_down_mattress", "target_min_radius": 0, "target_max_radius": 1, 
                                                        "true_eocs": [ "seiga_shikaisenritual_bed_found" ], 
                                                        "false_eocs": [
                                                          {
                                                            "id": "seiga_shikaisenritual_7",
                                                            "effect": [
                                                              {
                                                                "u_location_variable": { "global_val": "var_shikaisenritual_loc" }, "furniture": "f_makeshift_bed", "target_min_radius": 0, "target_max_radius": 1, 
                                                                "true_eocs": [ "seiga_shikaisenritual_bed_found" ], 
                                                                "false_eocs": [
                                                                  {
                                                                    "id": "seiga_shikaisenritual_8",
                                                                    "effect": [
                                                                      {
                                                                        "u_location_variable": { "global_val": "var_shikaisenritual_loc" }, "furniture": "f_straw_bed", "target_min_radius": 0, "target_max_radius": 1, 
                                                                        "true_eocs": [ "seiga_shikaisenritual_bed_found" ], 
                                                                        "false_eocs": [ "seiga_shikaisenritual_bed_none" ]
                                                                      }
                                                                    ]
                                                                  }
                                                                ] 
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "//": "This iterates a check for a bed or something close enough at the location, then runs either EOC below",
    "//note": "I'm sure there is another way... but I'm too exhausted as of lately"
  },
  {
    "id": "seiga_shikaisenritual_bed_found",
    "type": "effect_on_condition",
    "effect": [
      {
        "u_map_run_item_eocs": "all",
        "search_data": [ 
          { "id": "corpse_generic_human" },
          { "id": "corpse_generic_male" },
          { "id": "corpse_generic_female" }
        ],
        "loc": { "global_val": "var_shikaisenritual_loc" },
        "min_radius": 0,
        "max_radius": 0,
        "true_eocs": [ "seiga_shikaisenritual_corpse_found" ],
        "false_eocs": [ 
          {
            "id": "seiga_shikaisenritual_corpse_none",
            "effect": [ 
              { "u_message": "There is no replacement at the proper location to perform the ritual.", "type": "mixed" },
              { "math": [ "u_val('mana')", "+=", "250" ] }
            ]
          }
        ]
      }
    ],
    "//": "All human bodies are viable as I remember reading that Taoists were able to change their phenotype at will. Also due gameplay reasons",
    "//2": "While zombie corpses may be used, I don't know how to pull their ID. Also, by not adding those to the list, she's 'forced' to find a human to 'help' her with the ritual",
    "//3": "The following EOCs check for sheets or equivalent at the same location as the bed. The last EOC performs the ritual",
    "//4": "It removes the items, adds a dummy effect, and transforms the bed into a custom bed to serve as a visual checkpoint",
    "//5": "(and also because I don't know how to copy coordinates directly, so I use the custom bed to set coordinates independent of the furniture check above, which can be refreshed every time she casts the ritual, regardless if it fails or not)"
  },
  {
    "id": "seiga_shikaisenritual_corpse_found",
    "type": "effect_on_condition",
    "effect": [
      {
        "u_map_run_item_eocs": "all",
        "search_data": [ 
          { "id": "sheet" },
          { "id": "blanket" },
          { "id": "down_blanket" },
          { "id": "fur_blanket" },
          { "id": "quilt" },
          { "id": "quilt_patchwork" },
          { "id": "emer_blanket" },
          { "id": "grass_sheet" },
          { "id": "grass_blanket" }
        ],
        "loc": { "global_val": "var_shikaisenritual_loc" },
        "min_radius": 0,
        "max_radius": 0,
        "true_eocs": [ "seiga_shikaisenritual_sheet_found" ],
        "false_eocs": [ 
          {
            "id": "seiga_shikaisenritual_sheet_none",
            "effect": [ 
              { "u_message": "There is no proper covering for your replacement at the proper location to perform the ritual.", "type": "mixed" },
              { "math": [ "u_val('mana')", "+=", "250" ] }
            ]
          }
        ]
      }
    ]
  },
  {
    "id": "seiga_shikaisenritual_sheet_found",
    "type": "effect_on_condition",
    "effect": [
      {
        "u_map_run_item_eocs": "all",
        "search_data": [ 
          { "id": "corpse_generic_human" },
          { "id": "corpse_generic_male" },
          { "id": "corpse_generic_female" },
          { "id": "sheet" },
          { "id": "blanket" },
          { "id": "down_blanket" },
          { "id": "fur_blanket" },
          { "id": "quilt" },
          { "id": "quilt_patchwork" },
          { "id": "emer_blanket" },
          { "id": "grass_sheet" },
          { "id": "grass_blanket" }
        ],
        "loc": { "global_val": "var_shikaisenritual_loc" },
        "min_radius": 0,
        "max_radius": 0,
        "true_eocs": [ 
          { 
            "id": "seiga_shikaisenritual_success", 
            "effect": [ 
              { "u_message": "You begin performing the ritual…", "type": "mixed" },
              "npc_die",
              { "turn_cost": "5 m" },
              { "u_cast_spell": { "id": "seiga_shikaisenritual2" }, "loc": { "global_val": "var_shikaisenritual_loc" } },
              { "u_add_effect": "seiga_shikaisen_effect", "duration": "PERMANENT" },
              { "u_message": "The ritual is completed.  Your replacement is ready, in case you need it.", "type": "good" },
              { "u_location_variable": { "global_val": "var_seiga_revive_loc" }, "furniture": "f_bed_shikaisen", "target_min_radius": 0, "target_max_radius": 1 }
            ] 
          } 
        ],
        "false_eocs": [ 
          {
            "id": "seiga_shikaisenritual_fail",
            "effect": [ 
              { "u_message": "Some pieces to complete the ritual are missing.", "type": "mixed" },
              { "math": [ "u_val('mana')", "+=", "250" ] }
            ]
          }
        ]
      }
    ]
  },
  {
    "id": "seiga_shikaisenritual_bed_none",
    "type": "effect_on_condition",
    "effect": [
      { "u_message": "There is no bed nearby to perform the ritual.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "250" ] }
    ],
    "//": "This is not run inline as the main EOC is already huge and ugly. Move this whenever the furniture detection is more elegant"
  },
  {
    "id": "seiga_wallwalk_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "if": {
          "message": "Select wall", 
          "u_query_tile": "around",
          "target_var": { "global_val": "var_wallwalk_loc" }
        },
        "then": [
          {
            "if": { "map_terrain_with_flag": "WALL", "loc": { "global_val": "var_wallwalk_loc" } },
            "then": [
              { 
                "revert_location": { "global_val": "var_wallwalk_loc" },
                "time_in_future": "3 s",
                "key": "var_wallwalk_key"
              },
              { "u_cast_spell": { "id": "seiga_wallwalk2" }, "loc": { "global_val": "var_wallwalk_loc" } },
              { "u_message": "You open a hole in the wall.", "type": "mixed" }
            ],
            "else": [ 
              { "math": [ "u_val('mana')", "+=", "rand(33)" ] },
              { "u_message": "There's no suitable wall at the location.", "type": "mixed" }
            ]
          }
        ],
        "else": [ 
          { "math": [ "u_val('mana')", "+=", "rand(33)" ] },
          { "u_message": "Canceled" }
        ]
      }
    ],
    "//": "This asks for the player to select a location, checks if there's any wall",
    "//2": "If that's the case, it saves the location + reverts in 3 s, then casts the ter_transform spell",
    "//3": "This is much easier than saving the terrain ID and restoring it later (WIP spell pre-0.9.7.6)"
  },
  {
    "id": "seiga_yoshika_summon_eoc",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_monsters_nearby('mon_yoshika', 'radius': 960, 'attitude': 'friendly')", "==", "0" ] },
    "effect": [
      {
        "run_eocs": [
          {
            "id": "seiga_yoshika_summon_check",
            "condition": { "math": [ "u_val('mana')", ">=", "200" ] },
            "effect": [
              { "math": [ "u_val('mana')", "-=", "200" ] },
              { "u_message": "Opening a path to your Senkai, you call forth Yoshika to assist you.", "type": "good" },
              { "u_cast_spell": { "id": "seiga_yoshika_summon2" }, "targeted": false }
            ],
            "false_effect": [ 
              { "u_message": "You don't have enough mana.", "type": "mixed" }
            ]
          }
        ]
      }
    ],
    "false_effect": [ 
      { "u_message": "You move Yoshika to your side.", "type": "good" },
      { "u_cast_spell": { "id": "seiga_yoshika_summon3" }, "targeted": false }
    ],
    "//": "This EOC checks if there's not a Yoshika 'nearby', if that's the case it checks for mana and spawns a mon_yoshika ",
    "//2": "Otherwise, if there's a Yoshika nearby, it casts the tp spell (targeted to Yoshika) to teleport her"
  },
  {
    "id": "seiga_yoshika_tp_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "u_teleport": { "global_val": "var_seiga_loc" } }
    ]
  },
  {
    "id": "seiga_yoshika_var_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "u_var_yoshika_cast", "+=", "1" ] }
    ]
  },
  {
    "id": "tenko_keystonecrash_eoc",
    "type": "effect_on_condition",
    "condition": "u_is_outside",
    "effect": [
      { "u_cast_spell": { "id": "tenko_keystonecrash2" }, "targeted": true }
    ],
    "false_effect": [ 
      { "u_message": "You need a direct connection to the Heavens to summon a crashing keystone.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "100" ] }
    ]
  },
  {
    "id": "udonge_barrierwave_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "var_barrierwave", "=", "3" ] },
      { "u_add_effect": "udonge_barrierwave", "duration": "PERMANENT" }
    ]
  },
  {
    "id": "udonge_disbeliefaspect_eoc",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_monsters_nearby('mon_udonge_firing_squad', 'radius': 16, 'attitude': 'friendly')", "==", "0" ] },
    "effect": [
      { "u_cast_spell": { "id": "udonge_disbeliefaspect_spawn" }, "targeted": false }
    ],
    "false_effect": [ 
      { "math": [ "u_val('mana')", "+=", "100" ] },
      { "u_cast_spell": { "id": "udonge_disbeliefaspect_tp" }, "targeted": true }
    ],
    "//": "Simple EOC just checks if there is any Udonge firing squad around. If there isn't then she spawns some and consumes some mana, otherwise she casts the random tp",
    "//2": "Thank you so much andrei8l for #71222"
  },
  {
    "id": "udonge_gunwaveBLAST_eoc",
    "type": "effect_on_condition",
    "condition": { "u_has_wielded_with_weapon_category": "AUTOMATIC_PISTOLS" },
    "effect": [
      { "u_cast_spell": { "id": "udonge_gunwaveBLAST2" }, "targeted": true }
    ],
    "false_effect": [ 
      { "u_message": "You don't have any pistols equipped.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "75" ] }
    ],
    "//": "Simple EOC just checks if Udonge is wielding any pistols, if she isn't the cast fails"
  },
  {
    "id": "udonge_waveinsight_start",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "var_waveinsight", "+=", "1" ] },
      { "math": [ "var_wavemfortitude", "=", "0" ] },
      { "math": [ "var_waveperception", "=", "0" ] },
      { "math": [ "var_wavestealth", "=", "0" ] },
      { "u_lose_effect": "udonge_barrierwave" },
      { "u_lose_effect": "udonge_mfortitude" },
      { "u_lose_effect": "udonge_perception" },
      { "u_lose_effect": "udonge_stealth" },
      { "run_eocs": [ "udonge_waveinsight_cycle1" ] }
    ],
    "//": "Adds aura-specific var to signal it is ON, also sets the other auras + bonuses OFF",
    "//2": "Original 'aura', the others are modeled after this",
    "//IMPORTANT": "There's a 'leak', where toggling the aura OFF cycles one more time and defaults to the false_effect before stopping properly (set debug u_message to each effect and run it ingame to understand)",
    "//IMPORTANT2": "I think this happens with all aura EOCs based on this one",
    "//IMPORTANT3": "My guess is that happens due the queue'd EOC running not being 'cancelled'. The > 0 check is what actually stops the momentum. DO NOT REMOVE BEFORE FINDING A SOLUTION",
    "//IMPORTANT4": "I tried my best in trying to simplify all the cycle1 - cycle2 based EOCs but couldn't find a solution. Maybe in the future, idk these work as they are"
  },
  {
    "id": "udonge_waveinsight_cycle1",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_waveinsight", "<", "2" ] },
    "effect": [ { "run_eocs": [ "udonge_waveinsight_cycle2" ] } ],
    "false_effect": { "run_eocs": "udonge_waveinsight_toggle" },
    "//": "If Udonge has casted the spell just once the next step is run. However, if the player has casted the spell twice it runs the toggle EOC instead"
  },
  {
    "id": "udonge_waveinsight_cycle2",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "u_val('mana')", ">=", "33" ] },
        { "math": [ "var_waveinsight", ">", "0" ] }
      ]
    },
    "effect": [
      { "math": [ "u_val('mana')", "-=", "1" ] },
      { "u_add_effect": "udonge_insight", "duration": "3 s" },
      { "queue_eocs": [ "udonge_waveinsight_cycle1" ], "time_in_future": "2 s" }
    ],
    "false_effect": { "run_eocs": "udonge_wave_oom" },
    "//": "Checks if Udonge has enough mana to keep the aura bonus, and reduces mana. If she runs out of mana it runs the oom EOC instead"
  },
  {
    "id": "udonge_waveinsight_toggle",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_waveinsight", ">=", "2" ] },
    "effect": [
      { "math": [ "var_waveinsight", "=", "0" ] },
      { "u_lose_effect": "udonge_insight" }
    ],
    "//": "Toggle EOC, deactivates the auras when the spell is casted more than once"
  },
  {
    "id": "udonge_wave_oom",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_val('mana')", "<", "33" ] },
    "effect": [
      { "u_message": "You are too mentally exhausted!  You lose focus of the wavelengths.", "type": "bad" },
      { "math": [ "var_waveinsight", "=", "0" ] },
      { "math": [ "var_wavemfortitude", "=", "0" ] },
      { "math": [ "var_waveperception", "=", "0" ] },
      { "math": [ "var_wavestealth", "=", "0" ] },
      { "u_lose_effect": "udonge_insight" },
      { "u_lose_effect": "udonge_mfortitude" },
      { "u_lose_effect": "udonge_perception" },
      { "u_lose_effect": "udonge_stealth" }
    ],
    "//": "oom EOC, resets all aura vars, removes all buffs"
  },
  {
    "id": "udonge_wavemfortitude_start",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "var_waveinsight", "=", "0" ] },
      { "math": [ "var_wavemfortitude", "+=", "1" ] },
      { "math": [ "var_waveperception", "=", "0" ] },
      { "math": [ "var_wavestealth", "=", "0" ] },
      { "u_lose_effect": "udonge_barrierwave" },
      { "u_lose_effect": "udonge_insight" },
      { "u_lose_effect": "udonge_perception" },
      { "u_lose_effect": "udonge_stealth" },
      { "run_eocs": [ "udonge_wavemfortitude_cycle1" ] }
    ]
  },
  {
    "id": "udonge_wavemfortitude_cycle1",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_wavemfortitude", "<", "2" ] },
    "effect": [ { "run_eocs": [ "udonge_wavemfortitude_cycle2" ] } ],
    "false_effect": { "run_eocs": "udonge_wavemfortitude_toggle" }
  },
  {
    "id": "udonge_wavemfortitude_cycle2",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "u_val('mana')", ">=", "33" ] },
        { "math": [ "var_wavemfortitude", ">", "0" ] }
      ]
    },
    "effect": [
      { "math": [ "u_val('mana')", "-=", "6" ] },
      { "u_add_effect": "udonge_mfortitude", "duration": "3 s" },
      { "queue_eocs": [ "udonge_wavemfortitude_cycle1" ], "time_in_future": "2 s" }
    ],
    "false_effect": { "run_eocs": "udonge_wave_oom" }
  },
  {
    "id": "udonge_wavemfortitude_toggle",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_wavemfortitude", ">=", "2" ] },
    "effect": [
      { "math": [ "var_wavemfortitude", "=", "0" ] },
      { "u_lose_effect": "udonge_mfortitude" }
    ]
  },
  {
    "id": "udonge_waveperception_start",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "var_waveinsight", "=", "0" ] },
      { "math": [ "var_wavemfortitude", "=", "0" ] },
      { "math": [ "var_waveperception", "+=", "1" ] },
      { "math": [ "var_wavestealth", "=", "0" ] },
      { "u_lose_effect": "udonge_barrierwave" },
      { "u_lose_effect": "udonge_insight" },
      { "u_lose_effect": "udonge_mfortitude" },
      { "u_lose_effect": "udonge_stealth" },
      { "run_eocs": [ "udonge_waveperception_cycle1" ] }
    ]
  },
  {
    "id": "udonge_waveperception_cycle1",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_waveperception", "<", "2" ] },
    "effect": [ { "run_eocs": [ "udonge_waveperception_cycle2" ] } ],
    "false_effect": { "run_eocs": "udonge_waveperception_toggle" }
  },
  {
    "id": "udonge_waveperception_cycle2",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "u_val('mana')", ">=", "33" ] },
        { "math": [ "var_waveperception", ">", "0" ] }
      ]
    },
    "effect": [
      { "math": [ "u_val('mana')", "-=", "6" ] },
      { "u_add_effect": "udonge_perception", "duration": "3 s" },
      { "queue_eocs": [ "udonge_waveperception_cycle1" ], "time_in_future": "2 s" }
    ],
    "false_effect": { "run_eocs": "udonge_wave_oom" }
  },
  {
    "id": "udonge_waveperception_toggle",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_waveperception", ">=", "2" ] },
    "effect": [
      { "math": [ "var_waveperception", "=", "0" ] },
      { "u_lose_effect": "udonge_perception" }
    ]
  },
  {
    "id": "udonge_wavestealth_start",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "var_waveinsight", "=", "0" ] },
      { "math": [ "var_wavemfortitude", "=", "0" ] },
      { "math": [ "var_waveperception", "=", "0" ] },
      { "math": [ "var_wavestealth", "+=", "1" ] },
      { "u_lose_effect": "udonge_barrierwave" },
      { "u_lose_effect": "udonge_insight" },
      { "u_lose_effect": "udonge_mfortitude" },
      { "u_lose_effect": "udonge_perception" },
      { "run_eocs": [ "udonge_wavestealth_cycle1" ] }
    ]
  },
  {
    "id": "udonge_wavestealth_cycle1",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_wavestealth", "<", "2" ] },
    "effect": [ { "run_eocs": [ "udonge_wavestealth_cycle2" ] } ],
    "false_effect": { "run_eocs": "udonge_wavestealth_toggle" }
  },
  {
    "id": "udonge_wavestealth_cycle2",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "u_val('mana')", ">=", "33" ] },
        { "math": [ "var_wavestealth", ">", "0" ] }
      ]
    },
    "effect": [
      { "math": [ "u_val('mana')", "-=", "10" ] },
      { "u_add_effect": "udonge_stealth", "duration": "3 s" },
      { "queue_eocs": [ "udonge_wavestealth_cycle1" ], "time_in_future": "2 s" }
    ],
    "false_effect": { "run_eocs": "udonge_wave_oom" }
  },
  {
    "id": "udonge_wavestealth_toggle",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_wavestealth", ">=", "2" ] },
    "effect": [
      { "math": [ "var_wavestealth", "=", "0" ] },
      { "u_lose_effect": "udonge_stealth" }
    ]
  },
  {
    "id": "utsuho_blacksun_eoc",
    "type": "effect_on_condition",
    "condition": { "u_has_worn_with_flag": "UTSUHO_ROD_FLAG" },
    "effect": [
      { "u_cast_spell": { "id": "utsuho_blacksun2" } }
    ],
    "false_effect": [ 
      { "u_cast_spell": { "id": "utsuho_blacksun2_unc" } },
      { "math": [ "u_val('mana')", "-=", "50" ] }
    ]
  },
  {
    "id": "utsuho_detectrad_eoc",
    "type": "effect_on_condition",
    "condition": { "u_has_worn_with_flag": "UTSUHO_ROD_FLAG" },
    "effect": [
      { "run_eocs": [ "utsuho_detectrad_item_eoc" ] },
      { "run_eocs": [ "utsuho_detectrad_monster_eoc" ] }
    ],
    "false_effect": [ 
      { "u_message": "Something's wrong… you cannot detect anything.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "rand(50)" ] }
    ],
    "//": "Works with items and monsters. Fields, furniture and terrain are only detected once each in the aoe (top left)",
    "//2": "Additionally, the field isn't revealed through walls"
  },
  {
    "id": "utsuho_detectrad_item_eoc",
    "type": "effect_on_condition",
    "effect": [
      {
        "u_map_run_item_eocs": "all",
        "search_data": [ 
          { "flags": [ "LEAK_DAM" ] },
          { "flags": [ "RADIOACTIVE" ] },
          { "id": "afs_atompot" },
          { "id": "afs_archeotech_cartridge" },
          { "id": "afs_cRTG" },
          { "id": "bio_radleak" },
          { "id": "compact_ASRG_containment" },
          { "id": "grenade_cryo" },
          { "id": "minireactor" },
          { "id": "banana" }
        ],
        "loc": { "global_val": "var_detectrad_item_1" },
        "min_radius": 0,
        "max_radius": 32,
        "true_eocs": [
          {
            "id": "var_detectrad_item_1_1_eoc",
            "effect": [ 
              { "npc_location_variable": { "global_val": "var_detectrad_item_1_1" } },
              { "u_set_field": "fd_clairvoyant2", "radius": 0, "intensity": 1, "target_var": { "global_val": "var_detectrad_item_1_1" } }
            ]
          }
        ]
      }
    ],
    "//": "Thankfully it automatically runs it for *every* item, even of the same id"
  },
  {
    "id": "utsuho_detectrad_monster_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "u_cast_spell": { "id": "utsuho_detectrad2" }, "targeted": false }
    ]
  },
  {
    "id": "utsuho_fissionaura_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "var_utsuho_fissionaura", "+=", "1" ] },
      { "run_eocs": [ "utsuho_fissionaura_cycle1" ] }
    ],
    "//": "This EOC is a modified version of udonge_waveinsight_start . It has an extra step that checks if Utsuho is wearing her rod, if she isn't it runs a sub-cycle with different values"
  },
  {
    "id": "utsuho_fissionaura_cycle1",
    "type": "effect_on_condition",
    "condition": { "u_has_worn_with_flag": "UTSUHO_ROD_FLAG" },
    "effect": [
      { "run_eocs": [ "utsuho_fissionaura_cycle2" ] }
    ],
    "false_effect": [ { "run_eocs": [ "utsuho_fissionaura_cycle2_unc" ] } ]
  },
  {
    "id": "utsuho_fissionaura_cycle2",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_utsuho_fissionaura", "<", "2" ] },
    "effect": [ 
      { "u_cast_spell": { "id": "utsuho_fissionaura2" }, "targeted": false },
      { "run_eocs": [ "utsuho_fissionaura_cycle3" ] }
    ],
    "false_effect": { "run_eocs": "utsuho_fissionaura_toggle" }
  },
  {
    "id": "utsuho_fissionaura_cycle3",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "u_val('mana')", ">=", "11" ] },
        { "math": [ "var_utsuho_fissionaura", ">", "0" ] }
      ]
    },
    "effect": [
      { "math": [ "u_val('mana')", "-=", "11" ] },
      { "queue_eocs": [ "utsuho_fissionaura_cycle1" ], "time_in_future": "3 s" }
    ],
    "false_effect": { "run_eocs": "utsuho_fissionaura_oom" }
  },
  {
    "id": "utsuho_fissionaura_cycle2_unc",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_utsuho_fissionaura", "<", "2" ] },
    "effect": [ 
      { "u_cast_spell": { "id": "utsuho_fissionaura2_unc" }, "targeted": false },
      { "run_eocs": [ "utsuho_fissionaura_cycle3_unc" ] }
    ],
    "false_effect": { "run_eocs": "utsuho_fissionaura_toggle" }
  },
  {
    "id": "utsuho_fissionaura_cycle3_unc",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "u_val('mana')", ">=", "11" ] },
        { "math": [ "var_utsuho_fissionaura", ">", "0" ] }
      ]
    },
    "effect": [
      { "math": [ "u_val('mana')", "-=", "11 + rand(6)" ] },
      { "queue_eocs": [ "utsuho_fissionaura_cycle1" ], "time_in_future": [ "2 s", "4 s" ] }
    ],
    "false_effect": { "run_eocs": "utsuho_fissionaura_oom" }
  },
  {
    "id": "utsuho_fissionaura_toggle",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_utsuho_fissionaura", ">=", "2" ] },
    "effect": [
      { "u_message": "You return the fission controllers to base operational levels.", "type": "mixed" },
      { "math": [ "var_utsuho_fissionaura", "=", "0" ] }
    ]
  },
  {
    "id": "utsuho_fissionaura_oom",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_val('mana')", "<", "11" ] },
    "effect": [
      { "u_message": "You ran out of energy!  The fission controllers default to base operational levels.", "type": "mixed" },
      { "math": [ "var_utsuho_fissionaura", "=", "0" ] }
    ]
  },
  {
    "id": "utsuho_fusionblade_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "var_utsuho_fusionblade", "+=", "1" ] },
      { "run_eocs": [ "utsuho_fusionblade_cycle1" ] }
    ],
    "//": "This EOC is a modified version of udonge_waveinsight_start . It has an extra step to check if Utsuho is wearing her rod"
  },
  {
    "id": "utsuho_fusionblade_cycle1",
    "type": "effect_on_condition",
    "condition": { "u_has_worn_with_flag": "UTSUHO_ROD_FLAG" },
    "effect": [ { "run_eocs": [ "utsuho_fusionblade_cycle2" ] } ],
    "false_effect": [ { "run_eocs": [ "utsuho_fusionblade_unequipped" ] } ]
  },
  {
    "id": "utsuho_fusionblade_cycle2",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_utsuho_fusionblade", "<", "2" ] },
    "effect": [ { "run_eocs": [ "utsuho_fusionblade_cycle3" ] } ],
    "false_effect": { "run_eocs": "utsuho_fusionblade_toggle" }
  },
  {
    "id": "utsuho_fusionblade_cycle3",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "u_val('mana')", ">=", "2" ] },
        { "math": [ "var_utsuho_fusionblade", ">", "0" ] }
      ]
    },
    "effect": [
      { "math": [ "u_val('mana')", "-=", "2" ] },
      { "u_add_effect": "aura_fusionblade", "duration": "2 s" },
      { "queue_eocs": [ "utsuho_fusionblade_cycle1" ], "time_in_future": "1 s" }
    ],
    "false_effect": { "run_eocs": "utsuho_fusionblade_oom" },
    "//": "-2 mana/s equals +8 min of keeping this active"
  },
  {
    "id": "utsuho_fusionblade_unequipped",
    "type": "effect_on_condition",
    "effect": [
      { "u_message": "You unequip your rod, extinguishing the blade.", "type": "mixed" },
      { "math": [ "var_utsuho_fusionblade", "=", "0" ] },
      { "u_lose_effect": "aura_fusionblade" }
    ]
  },
  {
    "id": "utsuho_fusionblade_toggle",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_utsuho_fusionblade", ">=", "2" ] },
    "effect": [
      { "u_message": "You deactivate the fusion blade.", "type": "mixed" },
      { "math": [ "var_utsuho_fusionblade", "=", "0" ] },
      { "u_lose_effect": "aura_fusionblade" }
    ]
  },
  {
    "id": "utsuho_fusionblade_oom",
    "type": "effect_on_condition",
    "condition": { "math": [ "u_val('mana')", "<", "2" ] },
    "effect": [
      { "u_message": "You ran out of energy! The fusion blade is extinguished.", "type": "bad" },
      { "math": [ "var_utsuho_fusionblade", "=", "0" ] },
      { "u_lose_effect": "aura_fusionblade" }
    ]
  },
  {
    "id": "utsuho_groundmelt_eoc",
    "type": "effect_on_condition",
    "condition": { "u_has_worn_with_flag": "UTSUHO_ROD_FLAG" },
    "effect": [
      { "u_cast_spell": { "id": "utsuho_groundmelt2" }, "targeted": true }
    ],
    "false_effect": [ 
      { "u_message": "You need to equip your third rod to cast this.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "266" ] }
    ]
  },
  {
    "id": "utsuho_hellcannon_eoc",
    "type": "effect_on_condition",
    "condition": { "u_has_worn_with_flag": "UTSUHO_ROD_FLAG" },
    "effect": [
      { "u_cast_spell": { "id": "utsuho_hellcannon2" }, "targeted": true },
      { "u_cast_spell": { "id": "hellcannon_to_mon" }, "targeted": false }
    ],
    "false_effect": [ 
      { "math": [ "u_val('mana')", "-=", "50" ] },
      { "u_cast_spell": { "id": "utsuho_hellcannon2_unc" }, "targeted": true },
      { "u_cast_spell": { "id": "hellcannon_to_mon_unc" }, "targeted": false }
    ],
    "//": "Every time Utsuho casts utsuho_hellcannon she checks if she's wearing her third leg and:",
    "//2": "shoots hellcannon + runs the spell that tags *nearby* mon_utsuho_minisun with the EOC which adds the condition for their own hellcannon"
  },
  {
    "id": "utsuho_nuke_eoc",
    "type": "effect_on_condition",
    "condition": { "u_has_worn_with_flag": "UTSUHO_ROD_FLAG" },
    "effect": [
      {
        "if": {
          "message": "Set target", 
          "range": 32,
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_utsuho_nuke_loc" }
        },
        "then": [
          { 
            "queue_eoc_with": "utsuho_nuke_delay_eoc", 
            "variables": { "utsuho_nuke_loc": "var_utsuho_nuke_loc" }, 
            "time_in_future": "3 s" 
          }
        ],
        "else": [
          { "math": [ "u_val('mana')", "+=", "750" ] },
          { "u_message": "Canceled" }
        ]
      }
    ],
    "false_effect": [ 
      { "u_message": "You *definitely* need your rod to cast this.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "800" ] }
    ],
    "//": "Does she? :^)"
  },
  {
    "id": "utsuho_nuke_delay_eoc",
    "type": "effect_on_condition",
    "condition": { "expects_vars": [ "utsuho_nuke_loc" ] },
    "effect": [
      { "u_cast_spell": { "id": "utsuho_nuke2" }, "loc": { "global_val": "var_utsuho_nuke_loc" } }
    ]
  },
  {
    "id": "utsuho_ugeyser_eoc",
    "type": "effect_on_condition",
    "condition": { "u_has_worn_with_flag": "UTSUHO_ROD_FLAG" },
    "effect": [
      {
        "if": {
          "message": "Set target", 
          "range": 8,
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_utsuho_ugeyser_loc" }
        },
        "then": [
          { 
            "queue_eoc_with": "utsuho_ugeyser_delay_1", 
            "variables": { "utsuho_ugeyser_loc": "var_utsuho_ugeyser_loc" }, 
            "time_in_future": "3 s" 
          }
        ],
        "else": [
          { "math": [ "u_val('mana')", "+=", "75" ] },
          { "u_message": "Canceled" }
        ]
      }
    ],
    "false_effect": [
      {
        "if": {
          "message": "Set target", 
          "range": 8,
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_utsuho_ugeyser_loc" }
        },
        "then": [
          { 
            "queue_eoc_with": "utsuho_ugeyser_delay_2", 
            "variables": { "utsuho_ugeyser_loc": "var_utsuho_ugeyser_loc" }, 
            "time_in_future": [ "2 s", "5 s" ] 
          }
        ],
        "else": [
          { "math": [ "u_val('mana')", "+=", "75" ] },
          { "u_message": "Canceled" }
        ]
      }
    ]
  },
  {
    "id": "utsuho_ugeyser_delay_1",
    "type": "effect_on_condition",
    "condition": { "expects_vars": [ "utsuho_ugeyser_loc" ] },
    "effect": [
      { "u_cast_spell": { "id": "utsuho_ugeyser2" }, "loc": { "global_val": "var_utsuho_ugeyser_loc" } }
    ]
  },
  {
    "id": "utsuho_ugeyser_delay_2",
    "type": "effect_on_condition",
    "condition": { "expects_vars": [ "utsuho_ugeyser_loc" ] },
    "effect": [
      { "u_cast_spell": { "id": "utsuho_ugeyser2_unc" }, "loc": { "global_val": "var_utsuho_ugeyser_loc" } },
      { "math": [ "u_val('mana')", "-=", "50" ] }
    ]
  },
  {
    "id": "yamame_disease_icypyrexia_eoc",
    "type": "effect_on_condition",
    "condition": { "u_has_effect": "icy_pyrexia" },
    "effect": [
      { "math": [ "var_miasmaburst_dmg", "+=", "var_icypyrexia_dmg" ] }
    ],
    "//": "OK so the disease spell does several things. First, it applies the DISEASE effect on the target, then it runs a subspell which adds another effect for the player",
    "//2": "The effect on the player, DISEASE_counter, runs an intermittent spell in aoe. This spell forces any target around to run these EOCs, which detect if these target have any disease",
    "//3": "If they have any DISEASE effect, it adds to var_MIASMA ",
    "//4": "This is a workaround for queue_eocs not working on monsters AND enchants not working on monsters either. The second case would allow this same system to be monster-sided"
  },
  {
    "id": "yamame_disease_scarletplague_eoc",
    "type": "effect_on_condition",
    "condition": { "u_has_effect": "scarlet_plague" },
    "effect": [
      { "math": [ "var_miasmaburst_dmg", "+=", "var_scarletplague_dmg" ] }
    ]
  },
  {
    "id": "yamame_disease_volatilerot_eoc",
    "type": "effect_on_condition",
    "condition": { "u_has_effect": "volatile_rot" },
    "effect": [
      { "math": [ "var_miasmaburst_dmg", "+=", "var_volatilerot_dmg" ] },
      { "math": [ "u_var_volatilerot_rand", "+=", "1" ] },
      {
        "run_eocs": [
          {
            "id": "yamame_disease_volatilerot_check",
            "condition": { "math": [ "u_var_volatilerot_rand", ">", "( min( 4, (1 + rand(3)) ) )" ] },
            "effect": [
              { "math": [ "u_var_volatilerot_rand", "=", "0" ] },
              { "u_cast_spell": { "id": "yamame_disease_volatilerot_flare" }, "targeted": false }
            ]
          }
        ]
      }
    ],
    "//": "This EOC checks does two things. First, it adds the var_MIASMA to the target, similar to the previous EOCs",
    "//2": "It also adds a var_VOLATILE every 1 s, and checks if it's bigger than the minimum number between ( 4 to 2+rnd), if so target will cast the 'flare' spell and reset var_VOLATILE ",
    "//3": "tl;dr the disease can 'flare' between 2 to 5 seconds"
  },
  {
    "id": "yamame_damnedrope_eoc",
    "type": "effect_on_condition",
    "effect": [ 
      {
        "if": {
          "message": "Set target", 
          "range": { "math": [ "var_damnedrope_range" ] },
          "u_query_tile": "line_of_sight",
          "target_var": { "global_val": "var_damnedrope_loc" }
        },
        "then": [ 
          {
            "if": { "u_has_trait": "TSUCHIGUMO_SPECIES_active" },
            "then": [
              { "math": [ "var_yamame_as_youkai", "=", "1" ] },
              { "math": [ "var_yamame_as_human", "=", "0" ] }
            ],
            "else": [
              { "math": [ "var_yamame_as_youkai", "=", "0" ] },
              { "math": [ "var_yamame_as_human", "=", "1" ] }
            ]
          },
          { "run_eocs": [ "yamame_damnedrope_check_creature_eoc" ] },
          { "run_eocs": [ "yamame_damnedrope_check_item_eoc" ] },
          { "run_eocs": [ "yamame_damnedrope_self_pull_to_location_eoc" ] }
        ],
        "else": [
          { "math": [ "u_val('mana')", "+=", "75" ] },
          { "u_message": "Canceled" }
        ]
      }
    ],
    "//": "Based on nitori_extendo_arm_eoc ",
    "//2": "This first saves the target's location, then checks if Yamame is in human or youkai form, then sequentially checks for creature > item > location, in order of priority",
    "//3": "range 8 - 20"
  },
  {
    "id": "yamame_damnedrope_check_creature_eoc",
    "type": "effect_on_condition",
    "effect": [ 
      { "u_cast_spell": { "id": "yamame_damnedrope_creature_spell" }, "loc": { "global_val": "var_damnedrope_loc" } }
    ],
    "//": "If there's a creature at the location, Yamame casts this spell on them, which forces to run the next EOC"
  },
  {
    "id": "yamame_damnedrope_creature_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "u_location_variable": { "global_val": "var_damnedrope_creature_loc" } },
      { 
        "run_eocs": [ 
          {
            "id": "yamame_damnedrope_pulling_creature_as_human",
            "condition": { "math": [ "var_yamame_as_human", ">=", "1" ] },
            "effect": [ 
              { 
                "run_eocs": [ 
                  {
                    "id": "yamame_damnedrope_pulling_1",
                    "condition": { "math": [ "( n_val('weight') * 2 )", ">=", "u_val('weight')" ] },
                    "effect": [ 
                      { "u_cast_spell": { "id": "yamame_damnedrope3" } },
                      { "npc_cast_spell": { "id": "yamame_damnedrope_pull" }, "loc": { "global_val": "var_damnedrope_creature_loc" } },
                      { "npc_message": "You pull your target towards you!", "type": "good" }
                    ],
                    "false_effect": [ 
                      { "u_cast_spell": { "id": "yamame_damnedrope3" } },
                      { "npc_cast_spell": { "id": "yamame_damnedrope_self_pull" }, "loc": { "global_val": "var_damnedrope_creature_loc" } },
                      { "npc_message": "You pull yourself towards your target!", "type": "mixed" }
                    ]
                  }
                ] 
              }
            ]
          },
          {
            "id": "yamame_damnedrope_pulling_creature_as_youkai",
            "condition": { "math": [ "var_yamame_as_youkai", ">=", "1" ] },
            "effect": [ 
              { "u_cast_spell": { "id": "yamame_damnedrope3" } },
              { "npc_cast_spell": { "id": "yamame_damnedrope_pull" }, "loc": { "global_val": "var_damnedrope_creature_loc" } },
              { "npc_message": "You pull your target towards you!", "type": "good" }
            ]
          }
        ] 
      },
      { "math": [ "yamame_damnedrope_creature", "+=", "1" ] }
    ],
    "//": "If there's no creature at the location, the previous EOC -> spell is not cast and this EOC is not run. This is run by the target, so n/npc_ here is Yamame",
    "//2": "This checks if Yamame is in human form, then checks if the targeted creature's weight is less or equal than x2 Yamame's weight, and she either pulls it or pulls herself accordingly",
    "//3": "If Yamame is in youkai form, she can only pull the target towards her",
    "//4": "It also forces the target to cast the self stun",
    "//5": "Then, it adds the var_CREATUREFOUND that stops the checks below"
  },
  {
    "id": "yamame_damnedrope_check_item_eoc",
    "type": "effect_on_condition",
    "condition": { "math": [ "yamame_damnedrope_creature", "==", "0" ] },
    "effect": [
      {
        "u_map_run_item_eocs": "all",
        "//search_data": [  ],
        "loc": { "global_val": "var_damnedrope_loc" },
        "min_radius": 0,
        "max_radius": 0,
        "true_eocs": [ 
          {
            "id": "yamame_damnedrope_pulling_item_as_human",
            "condition": { "math": [ "var_yamame_as_human", ">=", "1" ] },
            "effect": [ 
              { 
                "run_eocs": [ 
                  {
                    "id": "yamame_damnedrope_pulling_2",
                    "condition": { "math": [ "( u_val('weight') * 2 )", ">=", "n_val('weight')" ] },
                    "effect": [ 
                      { "u_cast_spell": { "id": "yamame_damnedrope_pull" }, "loc": { "global_val": "var_damnedrope_loc" } },
                      { "u_message": "You pull your target towards you!", "type": "good" },
                      { "math": [ "yamame_damnedrope_item", "+=", "1" ] }
                    ],
                    "false_effect": [ 
                      { "u_cast_spell": { "id": "yamame_damnedrope_self_pull" }, "loc": { "global_val": "var_damnedrope_loc" } },
                      { "u_message": "You pull yourself towards your target!", "type": "mixed" },
                      { "math": [ "yamame_damnedrope_item", "+=", "1" ] }
                    ]
                  } 
                ] 
              }
            ]
          },
          {
            "id": "yamame_damnedrope_pulling_item_as_youkai",
            "condition": { "math": [ "var_yamame_as_youkai", ">=", "1" ] },
            "effect": [ 
              { "u_cast_spell": { "id": "yamame_damnedrope_pull" }, "loc": { "global_val": "var_damnedrope_loc" } },
              { "u_message": "You pull your target towards you!", "type": "good" },
              { "math": [ "yamame_damnedrope_item", "+=", "1" ] }
            ]
          }
        ]
      }
    ],
    "//": "Unlike the previous EOC, this is run by Yamame, so u_ is her",
    "//2": "This only runs if there was no targeted creature",
    "//3": "If that's the case, it first checks if Yamame is in human form, then checks for if Yamame is heavier than the (heaviest) item, and either pulls herself or the items",
    "//4": "It pulls anything in the stack. If there's a single heavier item, it runs for every item but ultimately only pulls herself. It doesn't pull items out of furniture or containers",
    "//5": "If Yamame is in youkai form, she can only pull the items towards her",
    "//6": "Then, it adds the var_ITEMFOUND that stops the location check below"
  },
  {
    "id": "yamame_damnedrope_self_pull_to_location_eoc",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "yamame_damnedrope_creature", "==", "0" ] },
        { "math": [ "yamame_damnedrope_item", "==", "0" ] }
      ]
    },
    "effect": [
      {
        "if": { "map_terrain_with_flag": "EMPTY_SPACE", "loc": { "global_val": "var_damnedrope_loc" } },
        "then": { "math": [ "yamame_damnedrope_loc_noground", "+=", "1" ] }
      },
      {
        "if": { "map_terrain_with_flag": "LIQUID", "loc": { "global_val": "var_damnedrope_loc" } },
        "then": { "math": [ "yamame_damnedrope_loc_noground", "+=", "1" ] }
      },
      {
        "if": { "math": [ "yamame_damnedrope_loc_noground", "==", "0" ] },
        "then": [ 
          { "u_cast_spell": { "id": "yamame_damnedrope_self_pull" }, "loc": { "global_val": "var_damnedrope_loc" } },
          { "u_message": "You pull yourself!", "type": "good" },
          { "run_eocs": [ "yamame_damnedrope_reset_eoc" ] }
        ],
        "else": [
          { "math": [ "u_val('mana')", "+=", "75" ] },
          { "u_message": "You can't pull yourself without solid ground.", "type": "mixed" },
          { "run_eocs": [ "yamame_damnedrope_reset_eoc" ] }
        ]
      }
    ],
    "false_effect": [ { "run_eocs": [ "yamame_damnedrope_reset_eoc" ] } ],
    "//": "If there was no creature and no item at the location, Yamame checks if there's solid ground to pull herself to the location, and pulls herself accordingly",
    "//2": "It runs the RESET_VARS EOC regardless of that"
  },
  {
    "id": "yamame_damnedrope_reset_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "yamame_damnedrope_creature", "=", "0" ] },
      { "math": [ "yamame_damnedrope_item", "=", "0" ] },
      { "math": [ "yamame_damnedrope_loc_noground", "=", "0" ] }
    ]
  },
  {
    "id": "yamame_miasmaburst_reset_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "math": [ "var_miasmaburst_dmg", "=", "0" ] }
    ]
  },
  {
    "id": "yamame_miasmaburst_stored_eoc",
    "type": "effect_on_condition",
    "condition": { "math": [ "var_miasmaburst_dmg", ">", "0" ] },
    "effect": [ 
      { "math": [ "var_miasmaburst_dmg", "-=", "2" ] },
      { "queue_eocs": [ "yamame_miasmaburst_stored_eoc"  ], "time_in_future": "7 s" }
    ],
    "//": "Reduces var_miasmaburst_dmg every 7 s"
  },
  {
    "id": "yamame_miasmaepidemic_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "run_eocs": [ "yamame_miasmaepidemic_1" ] },
      { "run_eocs": [ "yamame_miasmaepidemic_2" ] },
      { "run_eocs": [ "yamame_miasmaepidemic_3" ] }
    ],
    "//": "Subspell that act as a repeater for each of her spells, by separate",
    "//2": "As yamame_miasmaepidemic is run on ally + hostile, this EOC is forced upon them, so u_ is the victim's ally + hostile; NOT Yamame",
    "//3": "If the target is affected by the epidemic spell, it forces them to cast each spell below (which propagates the disease in aoe)"
  },
  {
    "id": "yamame_miasmaepidemic_1",
    "type": "effect_on_condition",
    "condition": { "u_has_effect": "icy_pyrexia" },
    "effect": [
      { "u_cast_spell": { "id": "yamame_disease_icypyrexia3" } }
    ]
  },
  {
    "id": "yamame_miasmaepidemic_2",
    "type": "effect_on_condition",
    "condition": { "u_has_effect": "scarlet_plague" },
    "effect": [
      { "math": [ "u_var_scarletplague", "=", "0" ] },
      { "u_cast_spell": { "id": "yamame_disease_scarletplague3" } }
    ]
  },
  {
    "id": "yamame_miasmaepidemic_3",
    "type": "effect_on_condition",
    "condition": { "u_has_effect": "volatile_rot" },
    "effect": [
      { "u_cast_spell": { "id": "yamame_disease_volatilerot3" } }
    ]
  },
  {
    "id": "yamame_miasmarelease_eoc",
    "type": "effect_on_condition",
    "condition": {
      "or": [
        { "u_has_effect": "icy_pyrexia" },
        { "u_has_effect": "scarlet_plague" },
        { "u_has_effect": "volatile_rot" }
      ]
    },
    "effect": [
      { "u_cast_spell": { "id": "yamame_miasmarelease3" }, "targeted": false }
    ],
    "//": "Checks if the target has the effects applied by each disease, if true it forces the target to cast the bonus dmg spell"
  },
  {
    "id": "youmu_doublewheel_eoc",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "u_monsters_nearby('mon_youmumyon', 'radius': 960, 'attitude': 'friendly')", "==", "0" ] },
        { "math": [ "u_monsters_nearby('mon_youmumyon2', 'radius': 960, 'attitude': 'friendly')", "==", "0" ] }
      ]
    },
    "effect": [
      {
        "run_eocs": [
          {
            "id": "youmu_doublewheel_check",
            "condition": { "math": [ "u_val('mana')", ">=", "100" ] },
            "effect": [
              { "math": [ "u_val('mana')", "-=", "100" ] },
              { "u_message": "You materialize your phantom half!", "type": "good" },
              { "u_cast_spell": { "id": "youmu_doublewheel2" }, "targeted": false }
            ],
            "false_effect": [ 
              { "u_message": "You don't have enough mana.", "type": "mixed" }
            ]
          }
        ]
      }
    ],
    "false_effect": [ 
      { "u_message": "You move your other half to your side.", "type": "good" },
      { "u_cast_spell": { "id": "youmu_phantom_tp" }, "targeted": false }
    ],
    "//": "This EOC checks if Youmu hasn't casted a spell with her half-phantom half yet, if that's the case it checks for mana and spawns a mon_youmumyon ",
    "//2": "Otherwise, if she has already casted her one, it casts the tp spell to teleport her"
  },
  {
    "id": "youmu_halfbody_eoc",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "u_monsters_nearby('mon_youmumyon', 'radius': 960, 'attitude': 'friendly')", "==", "0" ] },
        { "math": [ "u_monsters_nearby('mon_youmumyon2', 'radius': 960, 'attitude': 'friendly')", "==", "0" ] }
      ]
    },
    "effect": [
      {
        "run_eocs": [
          {
            "id": "youmu_halfbody_check",
            "condition": { "math": [ "u_val('mana')", ">=", "100" ] },
            "effect": [
              { "math": [ "u_val('mana')", "-=", "100" ] },
              { "u_message": "You send your phantom half!", "type": "good" },
              { "u_cast_spell": { "id": "youmu_halfbody2" }, "targeted": false }
            ],
            "false_effect": [ 
              { "u_message": "You don't have enough mana.", "type": "mixed" }
            ]
          }
        ]
      }
    ],
    "false_effect": [ 
      { "u_message": "You move your other half to your side.", "type": "good" },
      { "u_cast_spell": { "id": "youmu_phantom_tp" }, "targeted": false }
    ]
  },
  {
    "id": "youmu_phantom_tp_eoc",
    "type": "effect_on_condition",
    "effect": [
      { "u_teleport": { "global_val": "var_youmu_loc" } }
    ]
  },
  {
    "id": "youmu_insightfulsword_eoc",
    "type": "effect_on_condition",
    "condition": {
      "or": [
        { "u_has_wielded_with_weapon_category": "SHORT_SWORDS" },
        { "u_has_wielded_with_weapon_category": "MEDIUM_SWORDS" },
        { "u_has_wielded_with_weapon_category": "LONG_SWORDS" },
        { "u_has_wielded_with_weapon_category": "FENCING_WEAPONRY" },
        { "u_has_wielded_with_weapon_category": "LONG_THRUSTING_SWORDS" },
        { "u_has_wielded_with_weapon_category": "GREAT_SWORDS" },
        { "u_has_wielded_with_weapon_category": "BIONIC_SWORDS" }
      ]
    },
    "effect": [
      { "math": [ "u_var_insightfulsword", "=", "1" ] },
      { "u_add_effect": "parry_effect", "duration": "2 s" },
      {
        "queue_eocs": [
          {
            "id": "youmu_insightfulsword_timer",
            "effect": [
              { "math": [ "u_var_insightfulsword", "=", "0" ] },
              { "u_lose_effect": "parry_effect" }
            ]
          }
        ],
        "time_in_future": "2 s"
      }
    ],
    "false_effect": [ 
      { "u_message": "You need a sword to cast this.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "50" ] }
    ],
    "//": "Similar to meiling_mountainbreak_eoc , only checks if Youmu is wielding a weapon",
    "//2": "The var is linked to youmu_insightfulsword_hit "
  },
  {
    "id": "youmu_insightfulsword_check",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "var_melee_cut_dmg", ">=", "var_melee_bash_dmg" ] },
        { "math": [ "var_melee_cut_dmg", ">=", "var_melee_stab_dmg" ] }
      ]
    },
    "effect": [
      { "u_cast_spell": { "id": "youmu_insightfulsword2_cut" }, "targeted": true }
    ],
    "false_effect": [ 
      { "u_cast_spell": { "id": "youmu_insightfulsword2_bash" }, "targeted": true }
    ]
  },
  {
    "id": "youmu_reflectionslash_eoc",
    "type": "effect_on_condition",
    "condition": {
      "or": [
        { "u_has_wielded_with_weapon_category": "SHORT_SWORDS" },
        { "u_has_wielded_with_weapon_category": "MEDIUM_SWORDS" },
        { "u_has_wielded_with_weapon_category": "LONG_SWORDS" },
        { "u_has_wielded_with_weapon_category": "FENCING_WEAPONRY" },
        { "u_has_wielded_with_weapon_category": "LONG_THRUSTING_SWORDS" },
        { "u_has_wielded_with_weapon_category": "GREAT_SWORDS" },
        { "u_has_wielded_with_weapon_category": "BIONIC_SWORDS" }
      ]
    },
    "effect": [
      { "u_cast_spell": { "id": "youmu_reflectionslash2" }, "targeted": false }
    ],
    "false_effect": [ 
      { "u_message": "You need a sword to cast this.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "50" ] }
    ]
  },
  {
    "id": "youmu_slasheternal_eoc",
    "type": "effect_on_condition",
    "condition": {
      "or": [
        { "u_has_wielded_with_weapon_category": "SHORT_SWORDS" },
        { "u_has_wielded_with_weapon_category": "MEDIUM_SWORDS" },
        { "u_has_wielded_with_weapon_category": "LONG_SWORDS" },
        { "u_has_wielded_with_weapon_category": "FENCING_WEAPONRY" },
        { "u_has_wielded_with_weapon_category": "LONG_THRUSTING_SWORDS" },
        { "u_has_wielded_with_weapon_category": "GREAT_SWORDS" },
        { "u_has_wielded_with_weapon_category": "BIONIC_SWORDS" }
      ]
    },
    "effect": [
      { "run_eocs": [ "youmu_slasheternal_check" ] }
    ],
    "false_effect": [ 
      { "u_message": "You need a sword to cast this.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "100" ] }
    ],
    "//": "This EOC is a simplified version of kokoro_backsweep_eoc "
  },
  {
    "id": "youmu_slasheternal_check",
    "type": "effect_on_condition",
    "condition": {
      "and": [
        { "math": [ "var_melee_cut_dmg", ">=", "var_melee_bash_dmg" ] },
        { "math": [ "var_melee_cut_dmg", ">=", "var_melee_stab_dmg" ] }
      ]
    },
    "effect": [
      { "u_cast_spell": { "id": "youmu_slasheternal2_cut" }, "targeted": true },
      { "u_cast_spell": { "id": "slasheternal2_cut_to_mon" }, "targeted": false }
    ],
    "false_effect": [ 
      { "u_cast_spell": { "id": "youmu_slasheternal2_bash" }, "targeted": true },
      { "u_cast_spell": { "id": "slasheternal2_bash_to_mon" }, "targeted": false }
    ]
  },
  {
    "id": "youmu_slashnether_eoc",
    "type": "effect_on_condition",
    "condition": {
      "or": [
        { "u_has_wielded_with_weapon_category": "SHORT_SWORDS" },
        { "u_has_wielded_with_weapon_category": "MEDIUM_SWORDS" },
        { "u_has_wielded_with_weapon_category": "LONG_SWORDS" },
        { "u_has_wielded_with_weapon_category": "FENCING_WEAPONRY" },
        { "u_has_wielded_with_weapon_category": "LONG_THRUSTING_SWORDS" },
        { "u_has_wielded_with_weapon_category": "GREAT_SWORDS" },
        { "u_has_wielded_with_weapon_category": "BIONIC_SWORDS" }
      ]
    },
    "effect": [
      { "u_cast_spell": { "id": "youmu_slashnether2" }, "targeted": true },
      { "u_cast_spell": { "id": "slashnether2_to_mon" }, "targeted": false }
    ],
    "false_effect": [ 
      { "u_message": "You need a sword to cast this.", "type": "mixed" },
      { "math": [ "u_val('mana')", "+=", "100" ] }
    ],
    "//": "This EOC is a simplified version of kokoro_backsweep_eoc "
  }
]
